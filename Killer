-- Galaxy Hub Mini GUI con animaci√≥n de colores + contador de kills
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Crear ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "GalaxyHubGUI"
screenGui.Parent = PlayerGui

-- Crear Frame principal
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 220, 0, 80)
mainFrame.Position = UDim2.new(0.5, -110, 0.1, 0) -- centrado arriba
mainFrame.BackgroundColor3 = Color3.fromRGB(60, 0, 80) -- morado base
mainFrame.BorderSizePixel = 2
mainFrame.Parent = screenGui

-- Texto t√≠tulo
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.6, 0)
title.BackgroundTransparency = 1
title.Text = "Galaxy Hub"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextScaled = true
title.Parent = mainFrame

-- Texto contador de kills
local killCounter = Instance.new("TextLabel")
killCounter.Size = UDim2.new(1, 0, 0.4, 0)
killCounter.Position = UDim2.new(0, 0, 0.6, 0)
killCounter.BackgroundTransparency = 1
killCounter.Text = "Kills: 0"
killCounter.TextColor3 = Color3.fromRGB(255, 255, 255)
killCounter.Font = Enum.Font.Gotham
killCounter.TextScaled = true
killCounter.Parent = mainFrame

-- Animaci√≥n de contorno (morado <-> negro)
task.spawn(function()
    while task.wait(1) do
        local tween1 = TweenService:Create(mainFrame, TweenInfo.new(1), {BorderColor3 = Color3.fromRGB(128, 0, 255)})
        tween1:Play()
        tween1.Completed:Wait()

        local tween2 = TweenService:Create(mainFrame, TweenInfo.new(1), {BorderColor3 = Color3.fromRGB(0, 0, 0)})
        tween2:Play()
        tween2.Completed:Wait()
    end
end)

-- ================================
-- Script que se ejecuta autom√°ticamente
-- ================================
task.spawn(function()
    -- Variables globales
    _G.whitelistedPlayers = _G.whitelistedPlayers or {}
    _G.killAll = false
    _G.whitelistFriends = false
    _G.killCount = 0 -- contador de kills

    -- Funci√≥n auxiliar para verificar whitelist
    function isWhitelisted(player)
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == player.Name:lower() then
                return true
            end
        end
        return false
    end

    -- ‚öîÔ∏è Kill Everyone autom√°tico
    _G.killAll = true
    if not _G.killAllConnection then
        _G.killAllConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if _G.killAll then
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and not isWhitelisted(player) then
                        if killPlayer then
                            killPlayer(player) -- tu funci√≥n personalizada
                            _G.killCount = _G.killCount + 1
                            killCounter.Text = "Kills: " .. tostring(_G.killCount)
                        end
                    end
                end
            end
        end)
    end

    -- ‚úÖ Whitelist Friends autom√°tico
    _G.whitelistFriends = true
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player:IsFriendsWith(LocalPlayer.UserId) then
            table.insert(_G.whitelistedPlayers, player.Name)
        end
    end

    Players.PlayerAdded:Connect(function(player)
        if _G.whitelistFriends and player:IsFriendsWith(LocalPlayer.UserId) then
            table.insert(_G.whitelistedPlayers, player.Name)
        end
    end)

    print("‚úÖ Galaxy Hub iniciado: Kill Everyone + Whitelist Friends + Kill Counter")
end)

-- ================================
-- üåå Auto Server Hop (cada 2 minutos)
-- ================================
task.spawn(function()
    while task.wait(120) do -- cada 120 segundos
        local success, result = pcall(function()
            return game:HttpGet(
                "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"
            )
        end)

        if success and result then
            local data = HttpService:JSONDecode(result)
            local bestServer = nil
            local mostPlayers = 0

            for _, server in ipairs(data.data) do
                local count = server.playing
                local id = server.id
                if id ~= game.JobId and count > mostPlayers and count < server.maxPlayers then
                    bestServer = id
                    mostPlayers = count
                end
            end

            if bestServer then
                print("üåå Server Hop ‚Üí " .. bestServer .. " con " .. mostPlayers .. " jugadores")
                TeleportService:TeleportToPlaceInstance(game.PlaceId, bestServer, LocalPlayer)
            end
        else
            warn("No se pudo obtener lista de servidores")
        end
    end
end)
