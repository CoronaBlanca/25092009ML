-- üåå Galaxy Hub Autom√°tico con contador de KILLS reales y GUI movible
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Crear ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "GalaxyHubGUI"
screenGui.Parent = PlayerGui
screenGui.ResetOnSpawn = false

-- Crear Frame principal
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 220, 0, 80)
mainFrame.Position = UDim2.new(0.5, -110, 0.1, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
mainFrame.BorderSizePixel = 2
mainFrame.Active = true -- necesario para arrastrar
mainFrame.Draggable = true -- (funciona en muchos exploits, pero si no, abajo est√° el sistema manual)
mainFrame.Parent = screenGui

-- Sistema manual de arrastre (por si Draggable = true no funciona en tu executor)
do
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Texto t√≠tulo
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.6, 0)
title.BackgroundTransparency = 1
title.Text = "Galaxy Hub"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextScaled = true
title.Parent = mainFrame

-- Texto contador de kills
local killCounter = Instance.new("TextLabel")
killCounter.Size = UDim2.new(1, 0, 0.4, 0)
killCounter.Position = UDim2.new(0, 0, 0.6, 0)
killCounter.BackgroundTransparency = 1
killCounter.Text = "Kills: 0"
killCounter.TextColor3 = Color3.fromRGB(255, 255, 255)
killCounter.Font = Enum.Font.Gotham
killCounter.TextScaled = true
killCounter.Parent = mainFrame

-- Animaci√≥n de contorno
task.spawn(function()
    while task.wait(1) do
        local tween1 = TweenService:Create(mainFrame, TweenInfo.new(1), {BorderColor3 = Color3.fromRGB(128, 0, 255)})
        tween1:Play()
        tween1.Completed:Wait()

        local tween2 = TweenService:Create(mainFrame, TweenInfo.new(1), {BorderColor3 = Color3.fromRGB(0, 0, 0)})
        tween2:Play()
        tween2.Completed:Wait()
    end
end)

-- ================================
-- üü£ Contador de kills reales
-- ================================
local function updateKills()
    local stats = LocalPlayer:FindFirstChild("leaderstats")
    if stats then
        local kills = stats:FindFirstChild("Kills") or stats:FindFirstChild("KOs") or stats:FindFirstChild("Eliminations")
        if kills then
            killCounter.Text = "Kills: " .. tostring(kills.Value)
            kills:GetPropertyChangedSignal("Value"):Connect(function()
                killCounter.Text = "Kills: " .. tostring(kills.Value)
            end)
        else
            killCounter.Text = "Kills: (no detectado)"
        end
    end
end

if LocalPlayer:FindFirstChild("leaderstats") then
    updateKills()
else
    LocalPlayer.ChildAdded:Connect(function(child)
        if child.Name == "leaderstats" then
            updateKills()
        end
    end)
end

-- ================================
-- ‚öîÔ∏è Kill Everyone + Whitelist autom√°tico
-- ================================
-- üü£ Kill Everyone
local switchKillAll =
    Killer:AddSwitch(
    "Kill Everyone",
    function(bool)
        _G.killAll = bool
        if bool then
            if not _G.killAllConnection then
                _G.killAllConnection =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if _G.killAll then
                            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                                if player ~= game.Players.LocalPlayer and not isWhitelisted(player) then
                                    killPlayer(player)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.killAllConnection then
                _G.killAllConnection:Disconnect()
                _G.killAllConnection = nil
            end
        end
    end
)

-- üü£ Whitelist Friends
local switchWhitelist =
    Killer:AddSwitch(
    "Whitelist Friends",
    function(bool)
        _G.whitelistFriends = bool

        if bool then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                    if not table.find(_G.whitelistedPlayers, player.Name) then
                        table.insert(_G.whitelistedPlayers, player.Name)
                    end
                end
            end

            game.Players.PlayerAdded:Connect(
                function(player)
                    if _G.whitelistFriends and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                        if not table.find(_G.whitelistedPlayers, player.Name) then
                            table.insert(_G.whitelistedPlayers, player.Name)
                        end
                    end
                end
            )
        end
    end
)

-- ‚úÖ Activarlos desde el inicio
switchKillAll:Set(true)
switchWhitelist:Set(true)

-- ================================
-- üåå Auto Server Hop cada 2 minutos
-- ================================
-- Server Hop cada 120 segundos a servidores con 65% de capacidad o m√°s

local PlaceId = game.PlaceId

function ServerHop()
    local servers = {}
    local req = syn and syn.request or http_request or request

    if not req then
        warn("Tu ejecutor no soporta http requests.")
        return
    end

    local response = req({
        Url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Desc&limit=100"
    })

    if response and response.Body then
        local data = HttpService:JSONDecode(response.Body)
        for _, server in ipairs(data.data) do
            local occupancy = server.playing / server.maxPlayers
            if occupancy >= 0.65 and server.id ~= game.JobId then
                table.insert(servers, server.id)
            end
        end
    end

    if #servers > 0 then
        local targetServer = servers[math.random(1, #servers)]
        TeleportService:TeleportToPlaceInstance(PlaceId, targetServer)
    else
        warn("No se encontraron servidores con 65% de ocupaci√≥n o m√°s.")
    end
end

while true do
    wait(120) -- Server hop cada 120 segundos
    pcall(ServerHop)
end
