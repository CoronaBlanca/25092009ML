-- DESOFUSCADOR MOONSEC V3 - VERSI√ìN DEBUG
-- =========================================

print("üîß Iniciando diagn√≥stico...")

-- ‚öôÔ∏è CONFIGURACI√ìN
local WEBHOOK_URL = "TU_WEBHOOK_AQUI"
local GITHUB_RAW_URL = "https://raw.githubusercontent.com/USUARIO/REPO/main/script.lua"

-- TEST 1: Verificar funciones b√°sicas
print("\nüìã TEST 1: Verificando funciones disponibles...")
local functions_available = {
    ["game"] = game ~= nil,
    ["game:HttpGet"] = game and game.HttpGet ~= nil,
    ["loadstring"] = loadstring ~= nil,
    ["request"] = request ~= nil,
    ["writefile"] = writefile ~= nil,
    ["HttpService"] = pcall(function() return game:GetService("HttpService") end)
}

for name, available in pairs(functions_available) do
    print(string.format("  %s %s", available and "‚úÖ" or "‚ùå", name))
end

-- Si falta algo cr√≠tico, parar aqu√≠
if not game or not loadstring then
    warn("‚ùå ERROR CR√çTICO: Funciones b√°sicas no disponibles")
    return
end

print("\n‚úÖ Funciones b√°sicas OK")

-- TEST 2: Verificar descarga
print("\nüìã TEST 2: Probando descarga de GitHub...")

local download_success, downloaded_code = pcall(function()
    return game:HttpGet(GITHUB_RAW_URL, true)
end)

if not download_success then
    warn("‚ùå ERROR descargando:", downloaded_code)
    warn("üí° Posibles causas:")
    warn("   ‚Ä¢ Link incorrecto")
    warn("   ‚Ä¢ Repo privado")
    warn("   ‚Ä¢ Sin conexi√≥n")
    return
end

print("‚úÖ Descarga OK:", #downloaded_code, "bytes")

-- TEST 3: Verificar que el c√≥digo no est√© vac√≠o
if #downloaded_code < 100 then
    warn("‚ö†Ô∏è C√≥digo muy peque√±o, puede estar mal")
    print("Contenido:", downloaded_code:sub(1, 200))
    return
end

print("‚úÖ Tama√±o de c√≥digo v√°lido")

-- Captura simple
local captured_code = nil

-- Hook b√°sico de loadstring
local original_loadstring = loadstring
loadstring = function(code, ...)
    print("üîî loadstring llamado, tama√±o:", #code)
    
    -- Si NO es MoonSec, guardarlo
    if not code:find("MoonSec") and #code > 100 then
        print("‚úÖ C√≥digo limpio detectado!")
        captured_code = code
    end
    
    return original_loadstring(code, ...)
end

-- TEST 4: Ejecutar c√≥digo
print("\nüìã TEST 4: Ejecutando c√≥digo ofuscado...")
print("‚è≥ Espera 3 segundos...")

local exec_success, exec_error = pcall(function()
    local func = loadstring(downloaded_code)
    if func then
        func()
    else
        error("loadstring retorn√≥ nil")
    end
end)

if not exec_success then
    warn("‚ö†Ô∏è Error al ejecutar:", exec_error)
    print("üí° Esto puede ser normal si el c√≥digo necesita un entorno espec√≠fico")
end

-- Esperar captura
wait(3)

-- TEST 5: Verificar captura
print("\nüìã TEST 5: Verificando captura...")

if captured_code then
    print("‚úÖ ¬°C√ìDIGO CAPTURADO!")
    print("Tama√±o:", #captured_code, "bytes")
    print("Primeros 200 caracteres:")
    print(captured_code:sub(1, 200))
    
    -- Guardar
    if writefile then
        local filename = "captured_" .. os.time() .. ".lua"
        writefile(filename, captured_code)
        print("üíæ Guardado en:", filename)
    end
    
    -- Intentar enviar a Discord
    if WEBHOOK_URL ~= "TU_WEBHOOK_AQUI" then
        print("\nüì§ Intentando enviar a Discord...")
        
        local webhook_success = pcall(function()
            local preview = captured_code:sub(1, 3900)
            local payload = game:GetService("HttpService"):JSONEncode({
                content = "**C√≥digo Capturado (" .. #captured_code .. " bytes)**\n```lua\n" .. preview .. "\n```"
            })
            
            request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payload
            })
        end)
        
        if webhook_success then
            print("‚úÖ Enviado a Discord")
        else
            warn("‚ùå No se pudo enviar a Discord")
        end
    else
        print("‚ö†Ô∏è Webhook no configurado")
    end
    
else
    print("‚ùå NO SE CAPTUR√ì C√ìDIGO")
    print("\nüí° Esto significa que MoonSec V3:")
    print("   ‚Ä¢ No usa loadstring() para c√≥digo limpio")
    print("   ‚Ä¢ Ejecuta bytecode directamente en su VM")
    print("   ‚Ä¢ Necesita m√©todos m√°s avanzados")
    
    print("\nüìù Alternativas:")
    print("   1. Usar un decompiler de bytecode Lua")
    print("   2. Analizar con IDA Pro + plugins")
    print("   3. Hacer ingenier√≠a inversa manual")
    print("   4. Contactar al autor original")
end

print("\n" .. string.rep("=", 50))
print("üèÅ DIAGN√ìSTICO COMPLETADO")
print(string.rep("=", 50))

-- Mostrar resumen
print("\nRESUMEN:")
print("‚Ä¢ Descarga: " .. (download_success and "‚úÖ" or "‚ùå"))
print("‚Ä¢ Ejecuci√≥n: " .. (exec_success and "‚úÖ" or "‚ö†Ô∏è"))
print("‚Ä¢ Captura: " .. (captured_code and "‚úÖ" or "‚ùå"))
print("\nüí° Si no captur√≥ c√≥digo, MoonSec V3 es demasiado")
print("   protegido para desofuscar con este m√©todo.")
