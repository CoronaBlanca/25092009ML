-- DESOFUSCADOR CON WEBHOOK DE DISCORD (VERSIÓN MEJORADA)
-- =========================================================

-- ⚙️ CONFIGURACIÓN
local WEBHOOK_URL = "https://discordapp.com/api/webhooks/1428150779838988299/dCT_aUK_Xdufmurz8t7cd5qtjmKljVYJ5UB2c-UvhkB-OsaJ64VGsXI-XRwR9wlZ_JKT" -- Pon tu webhook completo aquí
local GITHUB_RAW_URL = "https://raw.githubusercontent.com/CoronaBlanca/2198832473482/refs/heads/main/dxsxfxscxtxr%20By%20Shxryx" -- O tu link

-- 📊 Captura profunda
local captured = {
    loadstring_calls = {},
    function_calls = {},
    getfenv_calls = {},
    setfenv_calls = {},
    debug_info = {},
    strings_found = {},
    variables = {}
}

print("🔍 Desofuscador Avanzado MoonSec V3")
print("=" .. string.rep("=", 49))

-- 🪝 HOOK LOADSTRING (múltiples niveles)
local old_loadstring = loadstring
_G.loadstring = function(code, chunkname)
    print("📦 loadstring() llamado")
    
    -- Verificar si NO es el mismo código ofuscado
    if not code:find("MoonSec V3") then
        print("✅ ¡CÓDIGO NUEVO DETECTADO!")
        table.insert(captured.loadstring_calls, {
            code = code,
            size = #code,
            chunk = chunkname or "unknown"
        })
    else
        print("⚠️ Detectado código MoonSec (ignorado)")
    end
    
    return old_loadstring(code, chunkname)
end
loadstring = _G.loadstring

-- 🪝 HOOK LOAD
if load then
    local old_load = load
    _G.load = function(chunk, ...)
        if type(chunk) == "string" and not chunk:find("MoonSec") then
            print("📦 load() con código limpio detectado")
            table.insert(captured.loadstring_calls, {
                code = chunk,
                size = #chunk,
                source = "load()"
            })
        end
        return old_load(chunk, ...)
    end
    load = _G.load
end

-- 🪝 HOOK GETFENV (capturar variables globales creadas)
local old_getfenv = getfenv
getfenv = function(level)
    local env = old_getfenv(level)
    
    -- Capturar nuevas variables globales
    for k, v in pairs(env) do
        if type(v) == "function" and not captured.variables[k] then
            captured.variables[k] = true
            table.insert(captured.function_calls, {
                name = k,
                type = type(v)
            })
        end
    end
    
    return env
end

-- 🪝 HOOK DEBUG.GETINFO (capturar funciones generadas)
if debug and debug.getinfo then
    local old_getinfo = debug.getinfo
    debug.getinfo = function(func, what)
        local info = old_getinfo(func, what)
        
        if info and info.source and not info.source:find("MoonSec") then
            table.insert(captured.debug_info, {
                source = info.source,
                name = info.name or "anonymous",
                line = info.linedefined or 0
            })
        end
        
        return info
    end
end

-- 🪝 CAPTURAR STRINGS (buscar patrones de código)
local old_tostring = tostring
tostring = function(obj)
    local str = old_tostring(obj)
    
    -- Detectar si es código Lua
    if type(str) == "string" and #str > 50 then
        if str:find("local ") or str:find("function") or str:find("return") then
            if not str:find("MoonSec") then
                print("🔍 String con código detectado")
                table.insert(captured.strings_found, str)
            end
        end
    end
    
    return str
end

-- 📤 FUNCIÓN PARA ENVIAR
local function send_to_discord(content, title)
    title = title or "Resultados"
    
    local preview = content:sub(1, 3900)
    
    local payload = game:GetService("HttpService"):JSONEncode({
        username = "MoonSec Hunter",
        embeds = {{
            title = "🔓 " .. title,
            description = "```lua\n" .. preview .. "\n```",
            color = 15158332,
            footer = {text = os.date("%H:%M:%S")}
        }}
    })
    
    pcall(function()
        request({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = payload
        })
    end)
end

-- 💾 GUARDAR
local function save_file(content, name)
    if writefile then
        writefile(name, content)
        print("💾 Guardado:", name)
    end
end

-- 🚀 DESCARGAR Y EJECUTAR
print("\n📥 Descargando código...")

local success, code = pcall(function()
    return game:HttpGet(GITHUB_RAW_URL, true)
end)

if not success then
    warn("❌ Error:", code)
    return
end

print("✅ Descargado:", #code, "bytes")

-- ⚡ EJECUTAR CON MÁXIMA CAPTURA
print("\n⚡ Ejecutando con hooks activos...")
print("⏳ Esto puede tardar unos segundos...\n")

-- Ejecutar
pcall(function()
    loadstring(code)()
end)

-- Esperar a que termine
wait(5)

print("\n" .. string.rep("=", 50))
print("📊 ANÁLISIS DE CAPTURA")
print(string.rep("=", 50))

-- 📋 ANALIZAR RESULTADOS
local report = "-- REPORTE DE DESOFUSCACIÓN MOONSEC V3\n"
report = report .. "-- Timestamp: " .. os.date() .. "\n"
report = report .. "-- " .. string.rep("=", 48) .. "\n\n"

-- 1. Códigos capturados con loadstring
if #captured.loadstring_calls > 0 then
    print("✅ Loadstring calls:", #captured.loadstring_calls)
    
    report = report .. "-- ========== CÓDIGOS EJECUTADOS ==========\n\n"
    
    for i, call in ipairs(captured.loadstring_calls) do
        report = report .. "-- Código #" .. i .. " (" .. call.size .. " bytes)\n"
        report = report .. "-- Source: " .. (call.chunk or call.source or "unknown") .. "\n\n"
        report = report .. call.code .. "\n\n"
        report = report .. string.rep("-", 50) .. "\n\n"
    end
else
    print("⚠️ No se capturaron loadstring calls")
    report = report .. "-- ⚠️ NO SE DETECTARON LLAMADAS A LOADSTRING\n\n"
end

-- 2. Funciones globales creadas
if #captured.function_calls > 0 then
    print("📝 Funciones detectadas:", #captured.function_calls)
    
    report = report .. "-- ========== FUNCIONES GLOBALES ==========\n\n"
    
    for _, func in ipairs(captured.function_calls) do
        report = report .. "-- " .. func.name .. " (" .. func.type .. ")\n"
    end
    report = report .. "\n"
end

-- 3. Strings con código
if #captured.strings_found > 0 then
    print("🔤 Strings encontrados:", #captured.strings_found)
    
    report = report .. "-- ========== STRINGS CAPTURADOS ==========\n\n"
    
    for i, str in ipairs(captured.strings_found) do
        report = report .. "-- String #" .. i .. ":\n"
        report = report .. str .. "\n\n"
    end
end

-- 4. Info de debug
if #captured.debug_info > 0 then
    print("🐛 Debug info:", #captured.debug_info)
    
    report = report .. "-- ========== DEBUG INFO ==========\n\n"
    
    for _, info in ipairs(captured.debug_info) do
        report = report .. "-- Function: " .. info.name .. "\n"
        report = report .. "-- Source: " .. info.source .. "\n"
        report = report .. "-- Line: " .. info.line .. "\n\n"
    end
end

-- 📊 RESUMEN
print("\n" .. string.rep("=", 50))
print("📊 RESUMEN FINAL")
print(string.rep("=", 50))
print("Loadstring calls:", #captured.loadstring_calls)
print("Funciones:", #captured.function_calls)
print("Strings:", #captured.strings_found)
print("Debug info:", #captured.debug_info)
print(string.rep("=", 50))

-- 📤 ENVIAR Y GUARDAR
if #captured.loadstring_calls > 0 then
    print("\n✅ ¡ÉXITO! Código capturado")
    send_to_discord(report, "Código Desofuscado")
    save_file(report, "deobfuscated_success.lua")
else
    print("\n⚠️ NO SE CAPTURÓ CÓDIGO LIMPIO")
    print("\n💡 Posibles razones:")
    print("   • MoonSec usa bytecode puro (sin loadstring)")
    print("   • Necesita método de captura diferente")
    print("   • El código ya está desofuscado")
    
    report = report .. "\n-- CÓDIGO ORIGINAL (sin desofuscar):\n\n"
    report = report .. code
    
    send_to_discord(report:sub(1, 3000), "Análisis sin código limpio")
    save_file(report, "analysis_report.lua")
end

print("\n🏁 Proceso terminado")
print("💾 Revisa los archivos generados en workspace")
