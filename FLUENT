local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
 
local Window = Library:CreateWindow{
    Title = "Sherya Script | Galaxy Hub",
    SubTitle = "By Isabella",
    TabWidth = 160,
    Size = UDim2.fromOffset(400, 400),
    Acrylic = true,
    Theme = "Amethyst Dark", -- Puedes cambiar a "Light" si prefieres
    MinimizeKey = Enum.KeyCode.RightControl
}

-- Fluent Renewed provides ALL 1544 Lucide 0.469.0 https://lucide.dev/icons/ Icons and ALL 9072 Phosphor 2.1.0 https://phosphoricons.com/ Icons for the tabs, icons are optional
local Tabs = {
  Main = Window:CreateTab{
    	Title = "Main",
    	Icon = "house"
    },
    Farm = Window:CreateTab{
        Title = "Farm",
        Icon = "wheat"
    },
  	Misc = Window:CreateTab{
        Title = "Misc",
        Icon = "settings"
    },
	Pets = Window:CreateTab{
        Title = "Pets",
        Icon = "heart"
    },
  	Stats = Window:CreateTab{
        Title = "Stats",
        Icon = "trending-up"
    },
	Calculator = Window:CreateTab{
        Title = "Calculator",
        Icon = "calculator"
    },
	Killer = Window:CreateTab{
        Title = "Killer",
        Icon = "sword"
    },
	Teleport = Window:CreateTab{
        Title = "Teleport",
        Icon = "zap"
    },
    Credits = Window:CreateTab{
        Title = "Credits",
        Icon = "users"
    }
}
local Options = Library.Options

Library:Notify{
    Title = "Welcome to Galaxy Hub",
    Content = "Galaxy Hub On Top",
    SubContent = "The Best Script For Muscle Legends", -- Optional
    Duration = 13 -- Set to nil to make the notification not disappear
}

Tabs.Main:AddSection("Discord Server Link")

Tabs.Main:CreateButton({
    Title = "Discord Server",
    Description = "Join our Discord server for support and updates!",
    Callback = function()
        Window:Dialog({
            Title = "Join Our Discord",
            Content = "Would you like to copy the invite link to our Discord server?",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        local link = "https://discord.gg/rnDrhTZZCF"
                        setclipboard(link)
                        print("Copied Discord link to clipboard.")
                    end
                }
            }
        })
    end
})

Tabs.Main:AddSection("Auto Brawls")

local godModeToggle = Tabs.Main:CreateToggle("godModeToggle", {
    Title = "God Mode (Brawl)",
    Default = false,
    Description = "Good for joining brawls automatically"
})

godModeToggle:OnChanged(function(state)
    godModeToggle = state

    if godModeToggle then
        task.spawn(function()
            while godModeToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0.1) -- peque침o delay para evitar lag
            end
        end)
    end
end)

-- 游댠 Auto Win Brawls
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Toggle
local autoWinBrawlToggle = Tabs.Main:CreateToggle("autoWinBrawl", {
    Title = "Auto Win Brawls",
    Default = false,
    Description = "Automatically wins brawls"
})

-- Estado global
getgenv().autoWinBrawl = false

-- Funci칩n para equipar el Punch
local function equipPunch()
    if not getgenv().autoWinBrawl then return end
    local character = LocalPlayer.Character
    if not character then return false end
    if character:FindFirstChild("Punch") then return true end

    local backpack = LocalPlayer.Backpack
    if not backpack then return false end

    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == "Punch" then
            tool.Parent = character
            return true
        end
    end
    return false
end

-- Validaci칩n de objetivo
local function isValidTarget(player)
    if not player or not player.Parent then return false end
    if player == LocalPlayer then return false end
    if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, player.Name) then return false end

    local character = player.Character
    if not character then return false end
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 or humanoid:GetState() == Enum.HumanoidStateType.Dead then
        return false
    end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    return rootPart ~= nil
end

-- Validar si el jugador local est치 listo
local function isLocalPlayerReady()
    local character = LocalPlayer.Character
    if not character then return false end
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    return character:FindFirstChild("LeftHand") or character:FindFirstChild("RightHand")
end

-- Safe firetouchinterest
local function safeTouchInterest(targetPart, localPart)
    if not targetPart or not localPart then return false end
    return pcall(function()
        firetouchinterest(targetPart, localPart, 0)
        task.wait(0.01)
        firetouchinterest(targetPart, localPart, 1)
    end)
end

-- Cuando cambia el toggle
autoWinBrawlToggle:OnChanged(function(state)
    getgenv().autoWinBrawl = state

    if state then
        -- Auto Join Brawl
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                pcall(function()
                    if LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)

        -- Auto Equip Punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                equipPunch()
            end
        end)

        -- Auto Punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    pcall(function() LocalPlayer.muscleEvent:FireServer("punch", "rightHand") end)
                    pcall(function() LocalPlayer.muscleEvent:FireServer("punch", "leftHand") end)
                end
            end
        end)

        -- Auto Hit Enemies
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    local character = LocalPlayer.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")

                    for _, player in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        if isValidTarget(player) then
                            local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
                            if leftHand then safeTouchInterest(targetRoot, leftHand) end
                            if rightHand then safeTouchInterest(targetRoot, rightHand) end
                        end
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

-- 游댠 Auto Join Brawl
local autoJoinBrawl = Tabs.Main:CreateToggle("autoJoinBrawl", {
    Title = "Auto Join Brawl",
    Default = false,
    Description = "Automatically joins brawls"
})

-- Estado global
getgenv().autoJoinBrawl = false

-- Cuando cambie el toggle
autoJoinBrawl:OnChanged(function(state)
    getgenv().autoJoinBrawl = state

    if state then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

Tabs.Main:AddSection("Jungle Gym")

-- Cache services for faster access
local VIM = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- 游눩 Auto Bench Press
local BenchPress = Tabs.Main:CreateToggle("autoBenchPress", {
    Title = "Auto Bench Press",
    Default = false,
    Description = "Automatically Bench Press"
})

-- Estado global
getgenv().working = false

-- Cuando cambie el toggle
BenchPress:OnChanged(function(state)
    if getgenv().working and not state then
        -- Si estaba activo y se desactiva
        getgenv().working = false
        return
    end

    getgenv().working = state
    if state then
        -- Aqu칤 va tu funci칩n para teletransportar y empezar el bench
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- 游눩 Auto Squat
local jungleSquat = Tabs.Main:CreateToggle("autoSquat", {
    Title = "Auto Squat",
    Default = false,
    Description = "Automatically Squat"
})

-- Estado global
getgenv().working = false

-- Cuando cambie el toggle
jungleSquat:OnChanged(function(state)
    if getgenv().working and not state then
        -- Si estaba activo y lo apagan
        getgenv().working = false
        return
    end

    getgenv().working = state
    if state then
        -- Ejecuta la funci칩n al activarse
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- 游뿯 Auto Boulder
local jungleBoulder = Tabs.Main:CreateToggle("autoBoulder", {
    Title = "Auto Boulder",
    Default = false,
    Description = "Automatically Boulder"
})

-- Estado global solo para Boulder
getgenv().autoBoulder = false

-- Cuando cambie el toggle
jungleBoulder:OnChanged(function(state)
    if getgenv().autoBoulder and not state then
        -- Si estaba activo y lo apagan
        getgenv().autoBoulder = false
        return
    end

    getgenv().autoBoulder = state
    if state then
        -- Teletransporta y empieza el Boulder
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

-- 游눩 Auto Pull Up
local junglePullUp = Tabs.Main:CreateToggle("autoPullUp", {
    Title = "Auto Pull Up",
    Default = false,
    Description = "Automatically Pull Up"
})

-- Estado global solo para Pull Up
getgenv().autoPullUp = false

-- Cuando cambie el toggle
junglePullUp:OnChanged(function(state)
    if getgenv().autoPullUp and not state then
        -- Si estaba activo y lo apagaron
        getgenv().autoPullUp = false
        return
    end

    getgenv().autoPullUp = state
    if state then
        -- Teletransporta y empieza el Pull Up
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- 游뿯 Auto Boulder
local jungleBoulder = Tabs.Main:CreateToggle("autoBoulder", {
    Title = "Auto Boulder",
    Default = false,
    Description = "Automatically Boulder"
})

-- Estado global solo para Boulder
getgenv().autoBoulder = false

-- Cuando cambie el toggle
jungleBoulder:OnChanged(function(state)
    if getgenv().autoBoulder and not state then
        -- Si estaba activo y lo apagaron
        getgenv().autoBoulder = false
        return
    end

    getgenv().autoBoulder = state
    if state then
        -- Teletransporta y empieza el Boulder
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

Tabs.Main:AddSection("Auto Gyms")

-- 游늷 Posiciones de cada ejercicio en cada gimnasio
local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

-- Ejercicios y traducciones
local workoutTypes = { "Bench Press", "Squat", "Deadlift", "Pull Up" }
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Sentadillas",
    ["Deadlift"] = "Peso Muerto",
    ["Pull Up"] = "Dominadas"
}

local gymLocations = { "Eternal Gym", "Legend Gym", "Muscle King Gym" }

-- Guardar referencias de toggles
local gymToggles = {}

-- Funci칩n segura para teletransportar
local function safeTeleport(workoutType, gym)
    local pos = workoutPositions[workoutType] and workoutPositions[workoutType][gym]
    if pos then
        teleportAndStart(workoutType, pos)
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error",
            Text = "No se encontr칩 posici칩n para " .. workoutType .. " en " .. gym,
            Duration = 5
        })
    end
end

-- Crear dropdowns y toggles por cada ejercicio
for _, workoutType in ipairs(workoutTypes) do
    local spanishWorkoutName = workoutTranslations[workoutType]

    -- Inicializar valor por defecto del dropdown
    local defaultGym = gymLocations[1]
    _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = defaultGym

    -- Dropdown Fluent
    local dropdown = Tabs.Main:CreateDropdown(workoutType .. "GymDropdown", {
        Title = spanishWorkoutName .. " - Gimnasio",
        Values = gymLocations,
        Multi = false,
        Default = defaultGym
    })

    dropdown:OnChanged(function(selected)
        _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = selected
    end)

    -- Toggle Fluent
    local toggle = Tabs.Main:CreateToggle(workoutType .. "GymToggle", {
        Title = "Auto " .. spanishWorkoutName,
        Default = false,
        Description = "Se teletransporta y entrena autom치ticamente en el gimnasio seleccionado"
    })

    toggle:OnChanged(function(state)
        getgenv()["auto" .. string.gsub(workoutType, " ", "")] = state

        if state then
            local selectedGym = _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"]

            -- Apagar otros toggles
            for otherType, otherToggle in pairs(gymToggles) do
                if otherType ~= workoutType and otherToggle then
                    otherToggle:Set(false)
                    getgenv()["auto" .. string.gsub(otherType, " ", "")] = false
                end
            end

            safeTeleport(workoutType, selectedGym)
        end
    end)

    gymToggles[workoutType] = toggle
end

-- Toggle general de Auto Gyms
local AutoGymsToggle = Tabs.Main:CreateToggle("autoGyms", {
    Title = "Auto Gyms",
    Default = false,
    Description = "Activa/desactiva todos los workouts autom치ticamente"
})

AutoGymsToggle:OnChanged(function(state)
    for workoutType, toggle in pairs(gymToggles) do
        toggle:Set(state)
        getgenv()["auto" .. string.gsub(workoutType, " ", "")] = state
    end
end)

Tabs.Main:AddSection("Auto Snacks")

-- 游꽇 Auto Snacks
local Autosnacks = Tabs.Main:CreateToggle("autoSnacks", {
    Title = "Auto Snacks",
    Default = false,
    Description = "Auto Snacks (No Egg)"
})

-- Estado global del toggle
getgenv().autoEatBoostsEnabled = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

-- Funci칩n para comer todos los boosts
local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0.1)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

-- Conectar el toggle
Autosnacks:OnChanged(function(state)
    getgenv().autoEatBoostsEnabled = state
end)

-- Loop seguro para comer boosts autom치ticamente
task.spawn(function()
    while true do
        if getgenv().autoEatBoostsEnabled then
            pcall(eatAllBoosts)
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

-- 游볰 Auto Protein Egg cada 30 minutos
local Autossnacks = Tabs.Main:CreateToggle("autoProteinEgg", {
    Title = "Auto Egg 30 Minuts",
    Default = false,
    Description = "Auto Protein Egg 30 minutos"
})

-- Estado global controlado por el toggle
getgenv().autoEatEnabled = false

-- Funci칩n para comer el huevo de prote칤na
local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

-- Conectar toggle
Autossnacks:OnChanged(function(state)
    getgenv().autoEatEnabled = state
end)

-- Loop seguro para comer huevo cada 30 minutos
task.spawn(function()
    while true do
        if getgenv().autoEatEnabled then
            pcall(eatProteinEgg)
            task.wait(1800) -- 30 minutos
        else
            task.wait(1)
        end
    end
end)

Tabs.Main:AddSection("OP Things/Farms")

local blockPosition = Tabs.Main:CreateToggle("blockPosition", {
    Title = "Lock position",
    Default = false,
    Description = "Locks your position (useful for farms)"
})

-- Callback cuando se cambia el toggle
blockPosition:OnChanged(function(Value)
    if Value then
        -- Guardar la posici칩n actual
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        
        -- Conectar a Heartbeat para bloquear posici칩n
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        -- Desconectar cuando se desactiva
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

local antiKnockback = Tabs.Main:CreateToggle("antiKnockback", {
    Title = "Anti Knockback",
    Default = false,
    Description = "Prevents knockback from enemies"
})

antiKnockback:OnChanged(function(Value)
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    if Value then
        -- Crear BodyVelocity para evitar knockback
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Name = "AntiKnockbackVelocity"
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        -- Remover BodyVelocity creado previamente
        local existingVelocity = rootPart:FindFirstChild("AntiKnockbackVelocity")
        if existingVelocity then
            existingVelocity:Destroy()
        end
    end
end)

local hideFrames = Tabs.Main:CreateToggle("hideFrames", {
    Title = "Hide Frames",
    Default = false,
    Description = "Hides unnecessary GUI frames"
})

hideFrames:OnChanged(function(Value)
    local player = game.Players.LocalPlayer
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return end

    -- Buscar y ocultar o mostrar los frames
    for _, obj in pairs(playerGui:GetDescendants()) do
        if obj:IsA("GuiObject") and obj.Name:match("Frame$") then
            if Value then
                obj.Visible = false
            else
                obj.Visible = true
            end
        end
    end
end)

Tabs.Main:CreateButton({
    Title = "Anti AFK",
    Description = "Prevents you from being kicked for being AFK",
    Callback = function()
        -- Variables para el Anti AFK GUI
        local antiAFKActive = false
        local antiAFKConnection = nil
        local sessionStartTime = tick()
        local sheryaGUI = nil

        -- Funci칩n para crear la GUI de monitoreo
        local function createSheryaGUI()
            if sheryaGUI then
                sheryaGUI:Destroy()
                sheryaGUI = nil
            end

            local player = game.Players.LocalPlayer
            local playerGui = player:WaitForChild("PlayerGui")

            sheryaGUI = Instance.new("ScreenGui")
            sheryaGUI.Name = "SheryaScript"
            sheryaGUI.Parent = playerGui
            sheryaGUI.ResetOnSpawn = false
            sheryaGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

            local mainFrame = Instance.new("Frame")
            mainFrame.Name = "MainFrame"
            mainFrame.Parent = sheryaGUI
            mainFrame.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
            mainFrame.BorderSizePixel = 0
            mainFrame.Position = UDim2.new(0, 10, 0, 10)
            mainFrame.Size = UDim2.new(0, 250, 0, 120)
            mainFrame.Active = true
            mainFrame.Draggable = true

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 8)
            corner.Parent = mainFrame

            -- Labels: t칤tulo, ping, fps, sesi칩n, status
            local function createLabel(name, posY, text, color)
                local label = Instance.new("TextLabel")
                label.Name = name
                label.Parent = mainFrame
                label.BackgroundTransparency = 1
                label.Position = UDim2.new(0, 5, 0, posY)
                label.Size = UDim2.new(1, -10, 0, 20)
                label.Font = Enum.Font.SourceSans
                label.Text = text
                label.TextColor3 = color
                label.TextScaled = true
                label.TextXAlignment = Enum.TextXAlignment.Left
                return label
            end

            local titleLabel = createLabel("Title", 0, "Sherya Script", Color3.fromRGB(255, 255, 255))
            titleLabel.Font = Enum.Font.SourceSansBold
            local pingLabel = createLabel("Ping", 25, "Ping: 0 ms", Color3.fromRGB(255, 255, 255))
            local fpsLabel = createLabel("FPS", 45, "FPS: 0", Color3.fromRGB(255, 255, 255))
            local sessionLabel = createLabel("SessionTime", 65, "Session: 00:00:00", Color3.fromRGB(255, 255, 255))
            local statusLabel = createLabel("Status", 85, "Anti-AFK Activo", Color3.fromRGB(0, 255, 0))

            -- Variables para FPS
            local frameCount = 0
            local lastTime = tick()
            local currentFPS = 0

            local function formatTime(seconds)
                local hours = math.floor(seconds / 3600)
                local minutes = math.floor((seconds % 3600) / 60)
                local secs = math.floor(seconds % 60)
                return string.format("%02d:%02d:%02d", hours, minutes, secs)
            end

            local Stats = game:GetService("Stats")
            local RunService = game:GetService("RunService")

            local function updateStats()
                frameCount = frameCount + 1
                local currentTime = tick()
                if currentTime - lastTime >= 1 then
                    currentFPS = frameCount
                    frameCount = 0
                    lastTime = currentTime
                end
                local ping = math.round(Stats.Network.ServerStatsItem["Data Ping"]:GetValue())
                local sessionTime = tick() - sessionStartTime

                pingLabel.Text = "Ping: " .. ping .. " ms"
                fpsLabel.Text = "FPS: " .. currentFPS
                sessionLabel.Text = "Session: " .. formatTime(sessionTime)
            end

            RunService.Heartbeat:Connect(updateStats)
            return sheryaGUI
        end

        -- Funci칩n para iniciar Anti-AFK
        local function startAntiAFK()
            if antiAFKConnection then
                antiAFKConnection:Disconnect()
            end

            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:WaitForChild("Humanoid")

            antiAFKConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if humanoid and humanoid.Parent then
                    local movement = math.sin(tick() * 0.1) * 0.01
                    humanoid:Move(Vector3.new(movement, 0, 0), false)
                end
            end)
        end

        local function stopAntiAFK()
            if antiAFKConnection then
                antiAFKConnection:Disconnect()
                antiAFKConnection = nil
            end
            if sheryaGUI then
                sheryaGUI:Destroy()
                sheryaGUI = nil
            end
        end

        -- Activar / desactivar
        if not antiAFKActive then
            antiAFKActive = true
            sessionStartTime = tick()
            createSheryaGUI()
            startAntiAFK()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Sherya Script";
                Text = "Anti-AFK activado! GUI de monitoreo visible.";
                Duration = 5;
            })
        else
            antiAFKActive = false
            stopAntiAFK()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Sherya Script";
                Text = "Anti-AFK desactivado! GUI cerrada.";
                Duration = 5;
            })
        end
    end
})











































Tabs.Home:AddSection("Local Player Configurations")

local timeDropdown = Tabs.Home:AddDropdown("ChangeTime", {
    Title = "Change Time",
    Values = {"Night", "Day", "Midnight"},
    Default = "Day",
    Callback = function(selection)
        local lighting = game:GetService("Lighting")

        if selection == "Night" then
            lighting.ClockTime = 0
        elseif selection == "Day" then
            lighting.ClockTime = 12
        elseif selection == "Midnight" then
            lighting.ClockTime = 6
        end
    end
})

local Toggle = Tabs.Killing:CreateToggle("AutoPunchNoAnim", {Title = "Auto Punch (No Anim)", Default = false})
Toggle:OnChanged(function(state)
    while state and Toggle.Value do
        local player = game.Players.LocalPlayer
        local char = game.Workspace:FindFirstChild(player.Name)
        local punchTool = player.Backpack:FindFirstChild("Punch") or (char and char:FindFirstChild("Punch"))

        if punchTool then
            if punchTool.Parent ~= char then
                punchTool.Parent = char -- Equip
            end

            player.muscleEvent:FireServer("punch", "rightHand")
            player.muscleEvent:FireServer("punch", "leftHand")
        else
            warn("Punch tool not found")
            Toggle:SetValue(false) -- Stop if tool not found
        end
        task.wait()
    end
end)

-- Speed Punch Button
Tabs.Killing:CreateButton({
    Title = "Fast Punch",
    Callback = function()
        local player = game.Players.LocalPlayer
        local punch = player.Backpack:FindFirstChild("Punch") or (game.Workspace:FindFirstChild(player.Name) and game.Workspace[player.Name]:FindFirstChild("Punch"))
        if punch and punch:FindFirstChild("attackTime") then
            punch.attackTime.Value = 0.065
        end
    end
})

-- Normal Punch Button
Tabs.Killing:CreateButton({
    Title = "Normal Punch",
    Callback = function()
        local player = game.Players.LocalPlayer
        local punch = player.Backpack:FindFirstChild("Punch") or (game.Workspace:FindFirstChild(player.Name) and game.Workspace[player.Name]:FindFirstChild("Punch"))
        if punch and punch:FindFirstChild("attackTime") then
            punch.attackTime.Value = 0.35
        end
    end
})

	-- Whitelist Table
local whitelist = {}
local playerList = {}

-- Create Dropdown
local Dropdown = Tabs.Killing:AddDropdown("WhitelistDropdown", {
    Title = "Whitelist Player(s)",
    Values = {},
    Multi = true,
    Default = {},
})

-- Populate initially
for _, player in ipairs(game.Players:GetPlayers()) do
    table.insert(playerList, player.Name)
end
Dropdown:SetValues(playerList)

-- Update on PlayerAdded
game.Players.PlayerAdded:Connect(function(player)
    table.insert(playerList, player.Name)
    Dropdown:SetValues(playerList)
end)

-- Update on PlayerRemoving
game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(playerList) do
        if name == player.Name then
            table.remove(playerList, i)
            break
        end
    end
    Dropdown:SetValues(playerList)
end)

-- Sync whitelist
Dropdown:OnChanged(function(selectedPlayers)
    table.clear(whitelist)
    for _, name in ipairs(selectedPlayers) do
        whitelist[name] = true
    end
    print("Whitelisted:", selectedPlayers)
end)

local AutokillToggle = Tabs.Killing:CreateToggle("AutoKill", {Title = "Auto Kill", Default = false})
AutokillToggle:OnChanged(function(state)
    while state and AutokillToggle.Value do
        local player = game.Players.LocalPlayer

        -- Auto punch setup
        local punch = player.Backpack:FindFirstChild("Punch") or (player.Character and player.Character:FindFirstChild("Punch"))
        if punch and punch:FindFirstChild("attackTime") then
            punch.attackTime.Value = 0.065
        end

        -- Auto kill logic
        for _, target in ipairs(game.Players:GetPlayers()) do
            if target ~= player and not whitelist[target.Name] then
                local root = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                local rHand = player.Character and player.Character:FindFirstChild("RightHand")
                local lHand = player.Character and player.Character:FindFirstChild("LeftHand")

                if root and rHand and lHand then
                    firetouchinterest(rHand, root, 1)
                    firetouchinterest(lHand, root, 1)
                    firetouchinterest(rHand, root, 0)
                    firetouchinterest(lHand, root, 0)
                end
            end
        end

        task.wait(0.1)
    end
end)

-- Target Kill
-- Target Kill (Dropdown en lugar de Input)
local targetPlayerName = nil

-- Dropdown din치mico
local targetPlayerList = {}
local TargetDropdown = Tabs.Killing:AddDropdown("TargetPlayerDropdown", {
    Title = "Target Player",
    Values = {},
    Multi = false, -- solo uno
    Default = {}
})

-- Llenar inicialmente
for _, player in ipairs(game.Players:GetPlayers()) do
    table.insert(targetPlayerList, player.Name)
end
TargetDropdown:SetValues(targetPlayerList)

-- Actualizar al entrar jugador
game.Players.PlayerAdded:Connect(function(player)
    table.insert(targetPlayerList, player.Name)
    TargetDropdown:SetValues(targetPlayerList)
end)

-- Actualizar al salir jugador
game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(targetPlayerList) do
        if name == player.Name then
            table.remove(targetPlayerList, i)
            break
        end
    end
    TargetDropdown:SetValues(targetPlayerList)
end)

-- Guardar el jugador seleccionado
TargetDropdown:OnChanged(function(selected)
    targetPlayerName = selected
    print("Target set to:", targetPlayerName)
end)

-- Auto Kill Target
local Toggle = Tabs.Killing:CreateToggle("AutoKillTarget", {Title = "Auto Kill Player", Default = false})
Toggle:OnChanged(function(state)
    while state and Toggle.Value do
        local player = game.Players.LocalPlayer
        local target = game.Players:FindFirstChild(targetPlayerName)

        if target and target ~= player then
            local root = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
            local rHand = player.Character and player.Character:FindFirstChild("RightHand")
            local lHand = player.Character and player.Character:FindFirstChild("LeftHand")

            if root and rHand and lHand then
                firetouchinterest(rHand, root, 1)
                firetouchinterest(lHand, root, 1)
                firetouchinterest(rHand, root, 0)
                firetouchinterest(lHand, root, 0)
            end
        end
        task.wait(0.1)
    end
end)

-- Spectate Player (Dropdown + Bot칩n de volver)
local spectateTarget = nil
local spectatePlayerList = {}
local Camera = workspace.CurrentCamera
local LocalPlayer = game.Players.LocalPlayer

-- Dropdown
local SpectateDropdown = Tabs.Killing:AddDropdown("SpectateDropdown", {
    Title = "Spectate Player",
    Values = {},
    Multi = false,
    Default = {}
})

-- Llenar inicialmente con nombres
for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= LocalPlayer then
        table.insert(spectatePlayerList, player.Name)
    end
end
SpectateDropdown:SetValues(spectatePlayerList)

-- Actualizar al entrar
game.Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        table.insert(spectatePlayerList, player.Name)
        SpectateDropdown:SetValues(spectatePlayerList)
    end
end)

-- Actualizar al salir
game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(spectatePlayerList) do
        if name == player.Name then
            table.remove(spectatePlayerList, i)
            break
        end
    end
    SpectateDropdown:SetValues(spectatePlayerList)

    if spectateTarget == player.Name then
        spectateTarget = nil
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hum then
            Camera.CameraSubject = hum
        end
    end
end)

-- Guardar seleccionado
SpectateDropdown:OnChanged(function(selected)
    spectateTarget = selected
    print("Spectating:", spectateTarget or "None")
end)

-- Bot칩n para volver a ti
Tabs.Killing:CreateButton({
    Title = "Dejar de Espectear",
    Callback = function()
        spectateTarget = nil
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hum then
            Camera.CameraSubject = hum
        end
        print("Stopped spectating, returned to self")
    end
})

-- Seguir al jugador
game:GetService("RunService").RenderStepped:Connect(function()
    if spectateTarget then
        local target = game.Players:FindFirstChild(spectateTarget)
        if target and target.Character then
            local hum = target.Character:FindFirstChild("Humanoid")
            if hum then
                Camera.CameraSubject = hum
            end
        end
    end
end)

-- Teleport / Follow Player
local followTarget = nil
local following = false
local Camera = workspace.CurrentCamera
local LocalPlayer = game.Players.LocalPlayer

-- God Mode (Brawl)
local godModeToggle = Tabs.Killing:CreateToggle("GodModeBrawl", {
    Title = "God Mode (Brawl)",
    Default = false
})

godModeToggle:OnChanged(function(State)
    if State then
        task.spawn(function()
            while godModeToggle.Value do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0) -- spam constante
            end
        end)
    end
end)


Tabs.Killing:CreateButton({
    Title = "Activar pegar muerto",
    Callback = function()
        loadstring(game:HttpGet("pon aca tu raw del pegar muerto "))()
    end
})

Tabs.Main:AddSection("")
Tabs.Main:AddSection("")
Tabs.Main:AddSection("")
Tabs.Main:AddSection("")
Tabs.Main:AddSection("")

