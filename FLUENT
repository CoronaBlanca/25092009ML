-- Galaxy Hub | Fixed & Polished by ChatGPT
-- Notes:
-- - Fixed duplicate toggles and conflicting globals
-- - Replaced bad VirtualInputManager key usage (now uses Enum.KeyCode)
-- - Prevented overwriting toggle objects with booleans
-- - Made Jungle Gym toggles mutually-exclusive and reliable
-- - Ensured auto-lift actually runs for each Jungle/Jim/Gym action
-- - Removed duplicated Boulder toggle block
-- - Added nil-safety around GUI lookups
-- - Minor cleanups for readability

-- // ========================= Loader ========================= 
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RS = game:GetService("RunService")
local VIM = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")

-- shared/global state
getgenv()._GH = getgenv()._GH or {}
local GH = getgenv()._GH

-- // ========================= Window ========================= 
local Window = Library:CreateWindow{
    Title = "Sherya Script | Galaxy Hub",
    SubTitle = "By Isabella",
    TabWidth = 160,
    Size = UDim2.fromOffset(400, 400),
    Acrylic = true,
    Theme = "Amethyst Dark",
    MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
  Main = Window:CreateTab{ Title = "Main", Icon = "house" },
  Farm = Window:CreateTab{ Title = "Farm", Icon = "wheat" },
  Misc = Window:CreateTab{ Title = "Misc", Icon = "settings" },
  Pets = Window:CreateTab{ Title = "Pets", Icon = "heart" },
  Stats = Window:CreateTab{ Title = "Stats", Icon = "trending-up" },
  Calculator = Window:CreateTab{ Title = "Calculator", Icon = "calculator" },
  Killer = Window:CreateTab{ Title = "Killer", Icon = "sword" },
  Teleport = Window:CreateTab{ Title = "Teleport", Icon = "zap" },
  Credits = Window:CreateTab{ Title = "Credits", Icon = "users" }
}
local Options = Library.Options

Library:Notify{
    Title = "Welcome to Galaxy Hub",
    Content = "Galaxy Hub On Top",
    SubContent = "The Best Script For Muscle Legends",
    Duration = 13
}

-- // ========================= Helpers ========================= 
local function safePcall(fn)
    return pcall(fn)
end

local function tryGet(pathFn)
    local ok, res = pcall(pathFn)
    if ok then return res end
    return nil
end

local function pressE()
    -- simulate quick E press
    VIM:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

local function isCharacterReady(player)
    player = player or LocalPlayer
    local character = player and player.Character
    if not character then return false end
    local hum = character:FindFirstChildOfClass("Humanoid")
    if not hum or hum.Health <= 0 or hum:GetState() == Enum.HumanoidStateType.Dead then return false end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    return hrp ~= nil
end

local function tpCFrame(cf)
    if not isCharacterReady() then return end
    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp then hrp.CFrame = cf end
end

local function notify(t, text)
    StarterGui:SetCore("SendNotification", { Title = t, Text = text, Duration = 5 })
end

-- muscleEvent wrappers
local function repOnce()
    local plr = LocalPlayer
    local ev = tryGet(function() return plr.muscleEvent end)
    if ev then safePcall(function() ev:FireServer("rep") end) end
end

local function punchBoth()
    local plr = LocalPlayer
    local ev = tryGet(function() return plr.muscleEvent end)
    if ev then
        safePcall(function() ev:FireServer("punch", "rightHand") end)
        safePcall(function() ev:FireServer("punch", "leftHand") end)
    end
end

-- Auto Lift loop (driven by GH.working)
local function autoLiftLoop()
    while GH.working do
        repOnce()
        task.wait()
    end
end

local function teleportAndStart(workoutName, cf)
    tpCFrame(cf)
    task.wait(0.15)
    pressE()
    -- ensure lifting loop enabled
    GH.working = true
    task.spawn(autoLiftLoop)
    GH.currentWorkout = workoutName
end

-- prevent multiple jungle toggles at once
local function disableAllJungle()
    GH.working = false
    GH.currentWorkout = nil
    if GH._JungleToggles then
        for _, t in pairs(GH._JungleToggles) do
            if t and t.Set then t:Set(false) end
        end
    end
end

-- // ========================= Main: Discord Link ========================= 
Tabs.Main:AddSection("Discord Server Link")
Tabs.Main:CreateButton({
    Title = "Discord Server",
    Description = "Join our Discord server for support and updates!",
    Callback = function()
        Window:Dialog({
            Title = "Join Our Discord",
            Content = "Would you like to copy the invite link to our Discord server?",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        setclipboard("https://discord.gg/rnDrhTZZCF")
                        print("Copied Discord link to clipboard.")
                    end
                }
            }
        })
    end
})

-- // ========================= Main: Auto Brawls ========================= 
Tabs.Main:AddSection("Auto Brawls")

GH.godModeBrawl = false
local godModeToggle = Tabs.Main:CreateToggle("godModeToggle", {
    Title = "God Mode (Brawl)",
    Default = false,
    Description = "Good for joining brawls automatically"
})

godModeToggle:OnChanged(function(state)
    GH.godModeBrawl = state
    if state then
        task.spawn(function()
            while GH.godModeBrawl do
                safePcall(function()
                    game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                end)
                task.wait(0.25) -- small delay to reduce lag/spam
            end
        end)
    end
end)

-- Auto Win Brawls
local autoWinBrawlToggle = Tabs.Main:CreateToggle("autoWinBrawl", {
    Title = "Auto Win Brawls",
    Default = false,
    Description = "Automatically wins brawls"
})

GH.autoWinBrawl = false

local function equipPunch()
    if not GH.autoWinBrawl then return end
    if not isCharacterReady() then return false end
    local char = LocalPlayer.Character
    if char:FindFirstChild("Punch") then return true end
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return false end
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == "Punch" then
            tool.Parent = char
            return true
        end
    end
    return false
end

local function isValidTarget(player)
    if not player or player == LocalPlayer then return false end
    if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, player.Name) then return false end
    local character = player.Character
    if not character then return false end
    local hum = character:FindFirstChildOfClass("Humanoid")
    if not hum or hum.Health <= 0 or hum:GetState() == Enum.HumanoidStateType.Dead then return false end
    return character:FindFirstChild("HumanoidRootPart") ~= nil
end

local function safeTouchInterest(targetPart, localPart)
    if not targetPart or not localPart then return false end
    return pcall(function()
        firetouchinterest(targetPart, localPart, 0)
        task.wait(0.01)
        firetouchinterest(targetPart, localPart, 1)
    end)
end

autoWinBrawlToggle:OnChanged(function(state)
    GH.autoWinBrawl = state
    if state then
        -- join brawl when prompted
        task.spawn(function()
            while GH.autoWinBrawl do
                safePcall(function()
                    local label = tryGet(function() return LocalPlayer.PlayerGui.gameGui.brawlJoinLabel end)
                    if label and label.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        label.Visible = false
                    end
                end)
                task.wait(0.5)
            end
        end)
        -- keep Punch equipped
        task.spawn(function()
            while GH.autoWinBrawl do
                equipPunch()
                task.wait(0.5)
            end
        end)
        -- auto punch
        task.spawn(function()
            while GH.autoWinBrawl do
                local inProgress = tryGet(function() return game.ReplicatedStorage.brawlInProgress.Value end)
                if inProgress and isCharacterReady() then
                    punchBoth()
                end
                task.wait(0.1)
            end
        end)
        -- auto hit enemies
        task.spawn(function()
            while GH.autoWinBrawl do
                local inProgress = tryGet(function() return game.ReplicatedStorage.brawlInProgress.Value end)
                if inProgress and isCharacterReady() then
                    local char = LocalPlayer.Character
                    local lh = char:FindFirstChild("LeftHand")
                    local rh = char:FindFirstChild("RightHand")
                    for _, plr in ipairs(Players:GetPlayers()) do
                        if not GH.autoWinBrawl then break end
                        if isValidTarget(plr) then
                            local hrp = tryGet(function() return plr.Character.HumanoidRootPart end)
                            if lh then safeTouchInterest(hrp, lh) end
                            if rh then safeTouchInterest(hrp, rh) end
                        end
                        task.wait(0.01)
                    end
                end
                task.wait(0.05)
            end
        end)
    end
end)

-- Auto Join Brawl
local autoJoinBrawl = Tabs.Main:CreateToggle("autoJoinBrawl", {
    Title = "Auto Join Brawl",
    Default = false,
    Description = "Automatically joins brawls"
})

GH.autoJoinBrawl = false

autoJoinBrawl:OnChanged(function(state)
    GH.autoJoinBrawl = state
    if state then
        task.spawn(function()
            while GH.autoJoinBrawl do
                safePcall(function()
                    local label = tryGet(function() return LocalPlayer.PlayerGui.gameGui.brawlJoinLabel end)
                    if label and label.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        label.Visible = false
                    end
                end)
                task.wait(0.5)
            end
        end)
    end
end)

-- // ========================= Main: Jungle Gym ========================= 
Tabs.Main:AddSection("Jungle Gym")

GH._JungleToggles = {}
GH.working = false
GH.currentWorkout = nil

-- jungle positions
local junglePositions = {
    ["Bench Press"] = CFrame.new(-8173, 64, 1898),
    ["Squat"]       = CFrame.new(-8352, 34, 2878),
    ["Boulder"]     = CFrame.new(-8621, 34, 2684),
    ["Pull Up"]     = CFrame.new(-8666, 34, 2070)
}

local function bindJungleToggle(keyName, uiTitle, workoutName)
    local toggle = Tabs.Main:CreateToggle(keyName, {
        Title = uiTitle,
        Default = false,
        Description = "Automatically " .. uiTitle
    })

    toggle:OnChanged(function(state)
        if state then
            disableAllJungle()
            -- re-enable this one
            if toggle.Set then toggle:Set(true) end
            local cf = junglePositions[workoutName]
            if cf then
                teleportAndStart(workoutName, cf)
                notify("Jungle Gym", "Started: " .. workoutName)
            else
                notify("Jungle Gym", "No position for " .. workoutName)
            end
        else
            if GH.currentWorkout == workoutName then
                GH.working = false
                GH.currentWorkout = nil
                notify("Jungle Gym", "Stopped: " .. workoutName)
            end
        end
    end)

    GH._JungleToggles[workoutName] = toggle
    return toggle
end

bindJungleToggle("autoBenchPress", "Bench Press", "Bench Press")
bindJungleToggle("autoSquat", "Squat", "Squat")
bindJungleToggle("autoBoulder", "Boulder", "Boulder")
bindJungleToggle("autoPullUp", "Pull Up", "Pull Up")

-- // ========================= Main: Auto Gyms ========================= 
Tabs.Main:AddSection("Auto Gyms")

local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

local workoutTypes = { "Bench Press", "Squat", "Deadlift", "Pull Up" }
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Sentadillas",
    ["Deadlift"] = "Peso Muerto",
    ["Pull Up"] = "Dominadas"
}
local gymLocations = { "Eternal Gym", "Legend Gym", "Muscle King Gym" }

local gymToggles = {}

local function safeTeleport(workoutType, gym)
    local pos = workoutPositions[workoutType] and workoutPositions[workoutType][gym]
    if pos then
        teleportAndStart(workoutType, pos)
    else
        notify("Error", "No se encontró posición para " .. workoutType .. " en " .. gym)
    end
end

for _, workoutType in ipairs(workoutTypes) do
    local spanishWorkoutName = workoutTranslations[workoutType]
    local defaultGym = gymLocations[1]
    _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = defaultGym

    local dropdown = Tabs.Main:CreateDropdown(workoutType .. "GymDropdown", {
        Title = spanishWorkoutName .. " - Gimnasio",
        Values = gymLocations,
        Multi = false,
        Default = defaultGym
    })

    dropdown:OnChanged(function(selected)
        _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = selected
    end)

    local toggle = Tabs.Main:CreateToggle(workoutType .. "GymToggle", {
        Title = "Auto " .. spanishWorkoutName,
        Default = false,
        Description = "Se teletransporta y entrena automáticamente en el gimnasio seleccionado"
    })

    toggle:OnChanged(function(state)
        GH["auto" .. string.gsub(workoutType, " ", "")] = state
        if state then
            -- turn off other gym toggles
            for otherType, otherToggle in pairs(gymToggles) do
                if otherType ~= workoutType and otherToggle and otherToggle.Set then
                    otherToggle:Set(false)
                    GH["auto" .. string.gsub(otherType, " ", "")] = false
                end
            end
            local selectedGym = _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"]
            GH.working = true
            safeTeleport(workoutType, selectedGym)
        else
            if GH.currentWorkout == workoutType then
                GH.working = false
                GH.currentWorkout = nil
            end
        end
    end)

    gymToggles[workoutType] = toggle
end

-- master toggle
local AutoGymsToggle = Tabs.Main:CreateToggle("autoGyms", {
    Title = "Auto Gyms",
    Default = false,
    Description = "Activa/desactiva todos los workouts automáticamente"
})

AutoGymsToggle:OnChanged(function(state)
    for workoutType, toggle in pairs(gymToggles) do
        if toggle and toggle.Set then toggle:Set(state) end
        GH["auto" .. string.gsub(workoutType, " ", "")] = state
    end
    GH.working = state
end)

-- // ========================= Main: Auto Snacks ========================= 
Tabs.Main:AddSection("Auto Snacks")

local AutoSnacks = Tabs.Main:CreateToggle("autoSnacks", {
    Title = "Auto Snacks",
    Default = false,
    Description = "Auto Snacks (No Egg)"
})

GH.autoEatBoosts = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    if not backpack or not character then return end
    for _, name in ipairs(boostsList) do
        local item = backpack:FindFirstChild(name)
        while item do
            item.Parent = character
            safePcall(function() item:Activate() end)
            task.wait(0.1)
            item = backpack:FindFirstChild(name)
        end
    end
end

AutoSnacks:OnChanged(function(state)
    GH.autoEatBoosts = state
end)

task.spawn(function()
    while true do
        if GH.autoEatBoosts then
            safePcall(eatAllBoosts)
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

-- Auto Protein Egg every 30 mins
local AutoProteinEgg = Tabs.Main:CreateToggle("autoProteinEgg", {
    Title = "Auto Egg 30 Minutes",
    Default = false,
    Description = "Auto Protein Egg cada 30 minutos"
})

GH.autoEatProteinEgg = false

local function eatProteinEgg()
    local player = LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    if not backpack or not character then return end
    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        safePcall(function() egg:Activate() end)
    end
end

AutoProteinEgg:OnChanged(function(state)
    GH.autoEatProteinEgg = state
end)

task.spawn(function()
    while true do
        if GH.autoEatProteinEgg then
            safePcall(eatProteinEgg)
            task.wait(1800)
        else
            task.wait(1)
        end
    end
end)

-- // ========================= Main: OP Things/Farms ========================= 
Tabs.Main:AddSection("OP Things/Farms")

local blockPosition = Tabs.Main:CreateToggle("blockPosition", {
    Title = "Lock position",
    Default = false,
    Description = "Locks your position (useful for farms)"
})

blockPosition:OnChanged(function(enabled)
    if enabled then
        if isCharacterReady() then
            local currentPos = LocalPlayer.Character.HumanoidRootPart.CFrame
            GH._posLockConn = RS.Heartbeat:Connect(function()
                local char = LocalPlayer.Character
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if hrp then hrp.CFrame = currentPos end
            end)
        end
    else
        if GH._posLockConn then GH._posLockConn:Disconnect() GH._posLockConn = nil end
    end
end)

local antiKnockback = Tabs.Main:CreateToggle("antiKnockback", {
    Title = "Anti Knockback",
    Default = false,
    Description = "Prevents knockback from enemies"
})

antiKnockback:OnChanged(function(enabled)
    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    if enabled then
        local bv = Instance.new("BodyVelocity")
        bv.Name = "AntiKnockbackVelocity"
        bv.MaxForce = Vector3.new(100000, 0, 100000)
        bv.Velocity = Vector3.new(0, 0, 0)
        bv.P = 1250
        bv.Parent = hrp
    else
        local bv = hrp:FindFirstChild("AntiKnockbackVelocity")
        if bv then bv:Destroy() end
    end
end)

local hideFrames = Tabs.Main:CreateToggle("hideFrames", {
    Title = "Hide Frames",
    Default = false,
    Description = "Hides unnecessary GUI frames"
})

hideFrames:OnChanged(function(enabled)
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    for _, obj in pairs(playerGui:GetDescendants()) do
        if obj:IsA("GuiObject") and obj.Name:match("Frame$") then
            obj.Visible = not enabled and true or false
        end
    end
end)

-- Anti AFK button
Tabs.Main:CreateButton({
    Title = "Anti AFK",
    Description = "Prevents you from being kicked for being AFK",
    Callback = function()
        local antiAFKActive = GH._antiAFKActive or false
        local antiAFKConnection = GH._antiAFKConn
        local sessionStartTime = tick()
        local sheryaGUI = GH._antiAFKGui

        local function createSheryaGUI()
            if sheryaGUI then sheryaGUI:Destroy() sheryaGUI = nil end
            local playerGui = LocalPlayer:WaitForChild("PlayerGui")
            sheryaGUI = Instance.new("ScreenGui")
            sheryaGUI.Name = "SheryaScript"
            sheryaGUI.Parent = playerGui
            sheryaGUI.ResetOnSpawn = false
            sheryaGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

            local mainFrame = Instance.new("Frame")
            mainFrame.Name = "MainFrame"
            mainFrame.Parent = sheryaGUI
            mainFrame.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
            mainFrame.BorderSizePixel = 0
            mainFrame.Position = UDim2.new(0, 10, 0, 10)
            mainFrame.Size = UDim2.new(0, 250, 0, 120)
            mainFrame.Active = true
            mainFrame.Draggable = true

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 8)
            corner.Parent = mainFrame

            local function createLabel(name, posY, text, color)
                local label = Instance.new("TextLabel")
                label.Name = name
                label.Parent = mainFrame
                label.BackgroundTransparency = 1
                label.Position = UDim2.new(0, 5, 0, posY)
                label.Size = UDim2.new(1, -10, 0, 20)
                label.Font = Enum.Font.SourceSans
                label.Text = text
                label.TextColor3 = color
                label.TextScaled = true
                label.TextXAlignment = Enum.TextXAlignment.Left
                return label
            end

            local titleLabel = createLabel("Title", 0, "Sherya Script", Color3.new(1,1,1))
            titleLabel.Font = Enum.Font.SourceSansBold
            local pingLabel = createLabel("Ping", 25, "Ping: 0 ms", Color3.new(1,1,1))
            local fpsLabel = createLabel("FPS", 45, "FPS: 0", Color3.new(1,1,1))
            local sessionLabel = createLabel("SessionTime", 65, "Session: 00:00:00", Color3.new(1,1,1))
            local statusLabel = createLabel("Status", 85, "Anti-AFK Activo", Color3.fromRGB(0,255,0))

            local frameCount = 0
            local lastTime = tick()
            local currentFPS = 0
            local Stats = game:GetService("Stats")

            RS.Heartbeat:Connect(function()
                frameCount += 1
                local now = tick()
                if now - lastTime >= 1 then
                    currentFPS = frameCount
                    frameCount = 0
                    lastTime = now
                end
                local ping = math.round(tryGet(function() return Stats.Network.ServerStatsItem["Data Ping"]:GetValue() end) or 0)
                local sessionTime = tick() - sessionStartTime
                pingLabel.Text = "Ping: " .. ping .. " ms"
                fpsLabel.Text = "FPS: " .. currentFPS
                sessionLabel.Text = string.format("Session: %02d:%02d:%02d", math.floor(sessionTime/3600), math.floor((sessionTime%3600)/60), math.floor(sessionTime%60))
            end)

            GH._antiAFKGui = sheryaGUI
            return sheryaGUI
        end

        local function startAntiAFK()
            if antiAFKConnection then antiAFKConnection:Disconnect() end
            antiAFKConnection = RS.Heartbeat:Connect(function()
                local character = LocalPlayer.Character
                local hum = character and character:FindFirstChildOfClass("Humanoid")
                if hum then
                    local movement = math.sin(tick() * 0.1) * 0.01
                    hum:Move(Vector3.new(movement, 0, 0), false)
                end
            end)
            GH._antiAFKConn = antiAFKConnection
        end

        local function stopAntiAFK()
            if antiAFKConnection then antiAFKConnection:Disconnect() antiAFKConnection = nil end
            if sheryaGUI then sheryaGUI:Destroy() sheryaGUI = nil end
            GH._antiAFKConn = nil
            GH._antiAFKGui = nil
        end

        if not GH._antiAFKActive then
            GH._antiAFKActive = true
            sessionStartTime = tick()
            createSheryaGUI()
            startAntiAFK()
            notify("Sherya Script", "Anti-AFK activado! GUI de monitoreo visible.")
        else
            GH._antiAFKActive = false
            stopAntiAFK()
            notify("Sherya Script", "Anti-AFK desactivado! GUI cerrada.")
        end
    end
})

-- // ========================= End ========================= 
-- Enjoy! SaveManager/InterfaceManager can be wired if you want profile saves/UI themes.

