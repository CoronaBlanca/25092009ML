local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local Window = DrRayLibrary:Load("Galaxy Hub", "By Sherya")

local mainTab = DrRayLibrary.newTab("Main", "ImageIdHere")
local farmTab = DrRayLibrary.newTab("Farm", "ImageIdHere")
local miscTab = DrRayLibrary.newTab("Misc", "ImageIdHere")
local killerTab = DrRayLibrary.newTab("Killer", "ImageIdHere")
local playersTab = DrRayLibrary.newTab("Teleport", "ImageIdHere")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local startTime = os.time()
local startRebirths = player.leaderstats.Rebirths.Value
local displayName = player.DisplayName

mainTab.newLabel("Auto Brawls")

-- God Mode Toggle
local godModeToggle = false
mainTab.newToggle("God Mode (Brawl)", "Enables god mode in brawls", false, function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                pcall(function()
                    ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                end)
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Win Brawls
mainTab.newToggle("Auto Win Brawls", "Automatically wins brawls", false, function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return false end
        local character = player.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        
        local backpack = player.Backpack
        if not backpack then return false end
        
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(targetPlayer)
        if not targetPlayer or not targetPlayer.Parent then return false end
        if targetPlayer == player then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, targetPlayer.Name) then return false end
        
        local character = targetPlayer.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        
        return true
    end

    local function isLocalPlayerReady()
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        -- Auto join brawls
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)

        -- Auto equip punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
            end
        end)

        -- Auto punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "rightHand") 
                    end)
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "leftHand") 
                    end)
                end
            end
        end)

        -- Touch detection for damage
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    local character = player.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")
                    
                    for _, targetPlayer in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        pcall(function()
                            if isValidTarget(targetPlayer) then
                                local targetRoot = targetPlayer.Character.HumanoidRootPart
                                if leftHand then
                                    safeTouchInterest(targetRoot, leftHand)
                                end
                                if rightHand then
                                    safeTouchInterest(targetRoot, rightHand)
                                end
                            end
                        end)
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

-- Auto Join Brawls (separate toggle)
mainTab.newToggle("Auto Join Brawls", "Automatically joins brawls", false, function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

mainTab.newLabel("Jungle Gym")

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- Jungle Gym Bench Press
mainTab.newToggle("Jungle Bench Press", "Automatically Bench Press", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- Jungle Gym Squat
mainTab.newToggle("Jungle Squat", "Automatically Squat", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- Jungle Gym Pull Up
mainTab.newToggle("Jungle Pull Up", "Automatically Pull Up", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- Jungle Gym Boulder
mainTab.newToggle("Jungle Boulder", "Automatically Boulder", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

mainTab.newLabel("Auto Snacks")

local autoEatBoostsEnabled = false
local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar", 
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0.1)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Clear Inventory", "Automatically eats all boosts/shakes", false, function(state)
    autoEatBoostsEnabled = state
end)

-- Auto Eat Protein Egg (Every 30 Minutes)
local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800) -- 30 minutes = 1800 seconds
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Eat Egg 30 Minutes", "Automatically eats Protein Egg every 30 minutes", false, function(state)
    autoEatEnabled = state
end)

mainTab.newLabel("OP Things/Farms")

-- Lock Position Toggle
mainTab.newToggle("Lock Position", "Locks your character position", false, function(Value)
    if Value then
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

-- Anti Knockback Toggle
mainTab.newToggle("Anti Knockback", "Prevents knockback effects", false, function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        if rootPart then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.P = 1250
            bodyVelocity.Parent = rootPart
            getgenv().antiKnockbackBody = bodyVelocity
        end
    else
        if getgenv().antiKnockbackBody then
            getgenv().antiKnockbackBody:Destroy()
            getgenv().antiKnockbackBody = nil
        end
    end
end)

-- Delete All Frames Toggle
mainTab.newToggle("Delete All Frames", "Removes frame objects from ReplicatedStorage", false, function(state)
    if state then
        local rSto = game:GetService("ReplicatedStorage")
        for _, obj in pairs(rSto:GetChildren()) do
            if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
                obj:Destroy()
            end
        end
    end
end)

-- Variables para el Anti AFK GUI
local antiAFKActive = false
local antiAFKConnection = nil
local sessionStartTime = tick()
local sheryaGUI = nil

-- Función para crear la GUI de monitoreo
local function createSheryaGUI()
    -- Eliminar GUI existente si existe
    if sheryaGUI then
        sheryaGUI:Destroy()
        sheryaGUI = nil
    end
    
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local Stats = game:GetService("Stats")
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Crear ScreenGui principal
    sheryaGUI = Instance.new("ScreenGui")
    sheryaGUI.Name = "SheryaScript"
    sheryaGUI.Parent = playerGui
    sheryaGUI.ResetOnSpawn = false
    sheryaGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Frame principal
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Parent = sheryaGUI
    mainFrame.BackgroundColor3 = Color3.fromRGB(128, 0, 128) -- Morado
    mainFrame.BorderSizePixel = 0
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.Size = UDim2.new(0, 250, 0, 120)
    mainFrame.Active = true
    mainFrame.Draggable = true -- Hacer la GUI movible
    
    -- Esquinas redondeadas
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame
    
    -- Título
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Parent = mainFrame
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.Size = UDim2.new(1, 0, 0, 25)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Text = "Galaxy Hub"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.TextWrapped = true
    
    -- Ping Label
    local pingLabel = Instance.new("TextLabel")
    pingLabel.Name = "Ping"
    pingLabel.Parent = mainFrame
    pingLabel.BackgroundTransparency = 1
    pingLabel.Position = UDim2.new(0, 5, 0, 25)
    pingLabel.Size = UDim2.new(1, -10, 0, 20)
    pingLabel.Font = Enum.Font.SourceSans
    pingLabel.Text = "Ping: 0 ms"
    pingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    pingLabel.TextScaled = true
    pingLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- FPS Label
    local fpsLabel = Instance.new("TextLabel")
    fpsLabel.Name = "FPS"
    fpsLabel.Parent = mainFrame
    fpsLabel.BackgroundTransparency = 1
    fpsLabel.Position = UDim2.new(0, 5, 0, 45)
    fpsLabel.Size = UDim2.new(1, -10, 0, 20)
    fpsLabel.Font = Enum.Font.SourceSans
    fpsLabel.Text = "FPS: 0"
    fpsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    fpsLabel.TextScaled = true
    fpsLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Session Time Label
    local sessionLabel = Instance.new("TextLabel")
    sessionLabel.Name = "SessionTime"
    sessionLabel.Parent = mainFrame
    sessionLabel.BackgroundTransparency = 1
    fpsLabel.Position = UDim2.new(0, 5, 0, 65)
    sessionLabel.Size = UDim2.new(1, -10, 0, 20)
    sessionLabel.Font = Enum.Font.SourceSans
    sessionLabel.Text = "Session: 00:00:00"
    sessionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sessionLabel.TextScaled = true
    sessionLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "Status"
    statusLabel.Parent = mainFrame
    statusLabel.BackgroundTransparency = 1
    statusLabel.Position = UDim2.new(0, 5, 0, 85)
    statusLabel.Size = UDim2.new(1, -10, 0, 20)
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.Text = "Anti-AFK Activo"
    statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    statusLabel.TextScaled = true
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Variables para calcular FPS
    local frameCount = 0
    local lastTime = tick()
    local currentFPS = 0
    
    -- Función para formatear tiempo
    local function formatTime(seconds)
        local hours = math.floor(seconds / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        local secs = math.floor(seconds % 60)
        return string.format("%02d:%02d:%02d", hours, minutes, secs)
    end
    
    -- Función para actualizar estadísticas
    local function updateStats()
        -- Actualizar FPS
        frameCount = frameCount + 1
        local currentTime = tick()
        if currentTime - lastTime >= 1 then
            currentFPS = frameCount
            frameCount = 0
            lastTime = currentTime
        end
        
        -- Actualizar Ping
        local ping = math.round(Stats.Network.ServerStatsItem["Data Ping"]:GetValue())
        
        -- Actualizar tiempo de sesión
        local sessionTime = tick() - sessionStartTime
        
        -- Actualizar labels
        pingLabel.Text = "Ping: " .. ping .. " ms"
        fpsLabel.Text = "FPS: " .. currentFPS
        sessionLabel.Text = "Session: " .. formatTime(sessionTime)
    end
    
    -- Conectar actualización de estadísticas
    RunService.Heartbeat:Connect(updateStats)
    
    return sheryaGUI
end

-- Función para activar Anti-AFK
local function startAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Sistema Anti-AFK mejorado
    antiAFKConnection = game:GetService("RunService").Heartbeat:Connect(function()
        -- Movimiento micro para evitar AFK
        if humanoid and humanoid.Parent then
            local currentTime = tick()
            local movement = math.sin(currentTime * 0.1) * 0.01
            humanoid:Move(Vector3.new(movement, 0, 0), false)
        end
    end)
    
    -- También activar anti-lag básico
    local function optimizeGame()
        -- Reducir calidad gráfica automáticamente
        local lighting = game:GetService("Lighting")
        lighting.GlobalShadows = false
        lighting.Technology = Enum.Technology.Compatibility
        
        -- Optimizar workspace
        workspace.StreamingEnabled = true
        workspace.StreamingTargetRadius = 100
        
        -- Configurar settings para mejor rendimiento
        settings().Rendering.QualityLevel = "Level01"
    end
    
    optimizeGame()
end

-- Función para detener Anti-AFK
local function stopAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
    
    if sheryaGUI then
        sheryaGUI:Destroy()
        sheryaGUI = nil
    end
end

-- Botón Anti AFK GUI
mainTab.newButton("Anti AFK GUI", "Toggle Anti-AFK with monitoring GUI", function()
    if not antiAFKActive then
        -- Activar Anti-AFK
        antiAFKActive = true
        sessionStartTime = tick() -- Reiniciar tiempo de sesión
        
        -- Crear y mostrar GUI
        createSheryaGUI()
        
        -- Iniciar sistema Anti-AFK
        startAntiAFK()
        
        -- Notificación de activación
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Galaxy Hub";
            Text = "Anti-AFK activado! GUI de monitoreo visible.";
            Duration = 5;
        })
        
        print("Anti-AFK y GUI de monitoreo activados")
        
    else
        -- Desactivar Anti-AFK
        antiAFKActive = false
        
        -- Detener sistema
        stopAntiAFK()
        
        -- Notificación de desactivación
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Galaxy Hub";
            Text = "Anti-AFK desactivado! GUI cerrada.";
            Duration = 5;
        })
        
        print("Anti-AFK desactivado")
    end
end)
