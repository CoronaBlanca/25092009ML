local Players = game:GetService("Players")
local player = Players.LocalPlayer

local displayName = player.DisplayName
if not displayName or displayName == "" then
    displayName = player.Name
end

local title = ("Candy Hub | Hello %s"):format(displayName)

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/p4020854-hub/La/refs/heads/main/L", true))()

local window = library:AddWindow(title, {
    main_color = Color3.fromRGB(255, 141, 161),
    min_size = Vector2.new(650, 870),
    can_resize = true,
})

local mainTab = window:AddTab("Main")
local farmTab = window:AddTab("Farm++")
local statsTab = window:AddTab("Stats")
local eggsTab = window:AddTab("Eggs")
local miscTab = window:AddTab("Misc")
local killerTab = window:AddTab("Killing")
local playersTab = window:AddTab("Players")
local teleportTab = window:AddTab("Teleport")
local creditsTab = window:AddTab("Credits")

local BrawlFolder = mainTab:AddFolder("  Auto Brawls")

BrawlFolder:AddSwitch("Auto Join Brawls", function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

local autoWinBrawlSwitch = BrawlFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool
    
    -- Equip Punch Tool function - will be called repeatedly
    local function equipPunch()
        if not getgenv().autoWinBrawl then return end
        
        local character = game.Players.LocalPlayer.Character
        if not character then return false end
        
        -- Check if already equipped
        if character:FindFirstChild("Punch") then return true end
        
        -- Try to equip from backpack
        local backpack = game.Players.LocalPlayer.Backpack
        if not backpack then return false end
        
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end
    
    -- Safe player check function
    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if whitelist[player.UserId] then return false end
        
        local character = player.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        
        -- Multiple health checks to be absolutely certain
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        
        return true
    end
    
    -- Safe local player check function
    local function isLocalPlayerReady()
        local player = game.Players.LocalPlayer
        if not player then return false end
        
        local character = player.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        
        return (leftHand ~= nil or rightHand ~= nil)
    end
    
    -- Safe firetouchinterest function
    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        
        local success, err = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        
        return success
    end
    
    -- Join Brawl Loop
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            if not getgenv().autoWinBrawl then break end
            
            if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
            end
        end
    end)
    
    -- Equipment loop - keeps trying to equip the punch
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            if not getgenv().autoWinBrawl then break end
            equipPunch()
        end
    end)
    
    -- Auto Punch Loop - keeps punching
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.1) do
            if not getgenv().autoWinBrawl then break end
            
            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local player = game.Players.LocalPlayer
                pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
            end
        end
    end)
    
    -- Main Kill Loop - extremely resilient
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.05) do
            if not getgenv().autoWinBrawl then break end
            
            -- Only proceed if local player is ready and brawl is in progress
            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local character = game.Players.LocalPlayer.Character
                local leftHand = character:FindFirstChild("LeftHand")
                local rightHand = character:FindFirstChild("RightHand")
                
                -- Process each player individually with error handling
                for _, player in pairs(Players:GetPlayers()) do
                    -- Skip if toggle was turned off mid-loop
                    if not getgenv().autoWinBrawl then break end
                    
                    -- Use pcall for the entire player processing to prevent any errors from breaking the loop
                    pcall(function()
                        if isValidTarget(player) then
                            local targetRoot = player.Character.HumanoidRootPart
                            
                            -- Try left hand
                            if leftHand then
                                safeTouchInterest(targetRoot, leftHand)
                            end
                            
                            -- Try right hand
                            if rightHand then
                                safeTouchInterest(targetRoot, rightHand)
                            end
                        end
                    end)
                    
                    -- Small delay between players to prevent overwhelming
                    task.wait(0.01)
                end
            end
        end
    end)
    
    -- Recovery system - if the main loop somehow breaks, this will restart it
    task.spawn(function()
        local lastPlayerCount = 0
        local stuckCounter = 0
        
        while getgenv().autoWinBrawl and task.wait(1) do
            if not getgenv().autoWinBrawl then break end
            
            -- Check if we're processing players
            local currentPlayerCount = #Players:GetPlayers()
            
            -- If player count changed but we're not seeing any activity, restart the kill loop
            if currentPlayerCount ~= lastPlayerCount then
                stuckCounter = 0
                lastPlayerCount = currentPlayerCount
            else
                stuckCounter = stuckCounter + 1
                
                -- If we seem stuck for too long, force re-equip the tool
                if stuckCounter > 5 then
                    stuckCounter = 0
                    
                    -- Force re-equip
                    pcall(function()
                        local character = game.Players.LocalPlayer.Character
                        if character and character:FindFirstChild("Punch") then
                            character.Punch.Parent = game.Players.LocalPlayer.Backpack
                            task.wait(0.1)
                            equipPunch()
                        else
                            equipPunch()
                        end
                    end)
                end
            end
        end
    end)
end)

local jungleGymFolder = mainTab:AddFolder("  Jungle Gym Farm")

-- Cache services for faster access
local VIM = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- Jungle Gym Bench Press
jungleGymFolder:AddSwitch("Jungle Bench Press", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- Jungle Gym Squat
jungleGymFolder:AddSwitch("Jungle Squat", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- Jungle Gym Pull Up
jungleGymFolder:AddSwitch("Jungle Pull Ups", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- Jungle Gym Boulder
jungleGymFolder:AddSwitch("Jungle Boulder", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

local farmGymsFolder = mainTab:AddFolder("  Auto Gyms")

-- Workout positions data
local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

-- Workout types
local workoutTypes = {
    "Bench Press",
    "Squat",
    "Deadlift",
    "Pull Up"
}

-- Gym locations (only the three requested)
local gymLocations = {
    "Eternal Gym",
    "Legend Gym",
    "Muscle King Gym"
}

-- Spanish translations for workout types
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Squat",
    ["Deadlift"] = "Dead Lift",
    ["Pull Up"] = "Pull Up"
}

-- Store references to toggle objects
local gymToggles = {}

-- Create dropdowns and toggles for each workout type
for _, workoutType in ipairs(workoutTypes) do
    -- Create dropdown for gym selection
    local dropdownName = workoutType .. "GymDropdown"
    local spanishWorkoutName = workoutTranslations[workoutType]
    
    -- Create the dropdown with the correct format
    local dropdown = farmGymsFolder:AddDropdown(spanishWorkoutName .. " - Gimnasio", function(selected)
        _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = selected
    end)
    
    -- Add gym locations to the dropdown
    for _, gymName in ipairs(gymLocations) do
        dropdown:Add(gymName)
    end
    
    -- Create toggle for workout
    local toggleName = workoutType .. "GymToggle"
    local toggle = farmGymsFolder:AddSwitch(spanishWorkoutName, function(bool)
        getgenv().workingGym = bool
        getgenv().currentWorkoutType = workoutType
        
        if bool then
            local selectedGym = _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] or gymLocations[1]
            
            -- Make sure we have a valid position
            if workoutPositions[workoutType] and workoutPositions[workoutType][selectedGym] then
                -- Stop any other workout that might be running
                for otherType, otherToggle in pairs(gymToggles) do
                    if otherType ~= workoutType and otherToggle then
                        otherToggle:Set(false)
                    end
                end
                
                -- Start the workout
                teleportAndStart(workoutType, workoutPositions[workoutType][selectedGym])
            else
                -- Notify user if position is not found
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Error",
                    Text = "Position not found for " .. workoutType .. " in " .. selectedGym,
                    Duration = 5
                })
            end
        end
    end)
    
    -- Store reference to toggle
    gymToggles[workoutType] = toggle
end

local opThingsFolder = mainTab:AddFolder("  OP Things/Farms")

opThingsFolder:AddSwitch("Anti Knockback", function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)

opThingsFolder:AddLabel("---{Tools + Punch}---")

-- Auto Weight + Punch (Fast Rep)
opThingsFolder:AddSwitch("Auto Weight + Punch", function(Value)
    _G.ComboWeightPunch = Value
    
    if Value then
        -- Weight Fast Rep
        task.spawn(function()
            while _G.ComboWeightPunch do
                local player = game.Players.LocalPlayer
                local tool = player.Backpack:FindFirstChild("Weight") or player.Character:FindFirstChild("Weight")
                if tool then
                    player.Character.Humanoid:EquipTool(tool)
                    if tool:FindFirstChild("repTime") then tool.repTime.Value = 0 end
                end
                player.muscleEvent:FireServer("rep")
                task.wait()
            end
        end)
        -- Punch Fast Attack
        task.spawn(function()
            while _G.ComboWeightPunch do
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then punch.attackTime.Value = 0 end
                end
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                local punchTool = player.Character and player.Character:FindFirstChild("Punch")
                if punchTool then punchTool:Activate() end
                task.wait()
            end
        end)
    else
        local char = game.Players.LocalPlayer.Character
        for _, toolName in ipairs({"Weight","Punch"}) do
            local eq = char:FindFirstChild(toolName)
            if eq then eq.Parent = game.Players.LocalPlayer.Backpack end
        end
    end
end, "Levanta pesas y golpea automáticamente (rápido)")


-- Auto Pushups + Punch (Fast Rep)
opThingsFolder:AddSwitch("Auto Pushups + Punch", function(Value)
    _G.ComboPushupPunch = Value
    
    if Value then
        -- Pushups Fast Rep
        task.spawn(function()
            while _G.ComboPushupPunch do
                local player = game.Players.LocalPlayer
                local tool = player.Backpack:FindFirstChild("Pushups") or player.Character:FindFirstChild("Pushups")
                if tool then
                    player.Character.Humanoid:EquipTool(tool)
                    if tool:FindFirstChild("repTime") then tool.repTime.Value = 0 end
                end
                player.muscleEvent:FireServer("rep")
                task.wait()
            end
        end)
        -- Punch Fast Attack
        task.spawn(function()
            while _G.ComboPushupPunch do
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then punch.attackTime.Value = 0 end
                end
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                local punchTool = player.Character and player.Character:FindFirstChild("Punch")
                if punchTool then punchTool:Activate() end
                task.wait()
            end
        end)
    else
        local char = game.Players.LocalPlayer.Character
        for _, toolName in ipairs({"Pushups","Punch"}) do
            local eq = char:FindFirstChild(toolName)
            if eq then eq.Parent = game.Players.LocalPlayer.Backpack end
        end
    end
end, "Haz flexiones y golpea automáticamente (rápido)")


-- Auto Situps + Punch (Fast Rep)
opThingsFolder:AddSwitch("Auto Situps + Punch", function(Value)
    _G.ComboSitupPunch = Value
    
    if Value then
        -- Situps Fast Rep
        task.spawn(function()
            while _G.ComboSitupPunch do
                local player = game.Players.LocalPlayer
                local tool = player.Backpack:FindFirstChild("Situps") or player.Character:FindFirstChild("Situps")
                if tool then
                    player.Character.Humanoid:EquipTool(tool)
                    if tool:FindFirstChild("repTime") then tool.repTime.Value = 0 end
                end
                player.muscleEvent:FireServer("rep")
                task.wait()
            end
        end)
        -- Punch Fast Attack
        task.spawn(function()
            while _G.ComboSitupPunch do
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then punch.attackTime.Value = 0 end
                end
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                local punchTool = player.Character and player.Character:FindFirstChild("Punch")
                if punchTool then punchTool:Activate() end
                task.wait()
            end
        end)
    else
        local char = game.Players.LocalPlayer.Character
        for _, toolName in ipairs({"Situps","Punch"}) do
            local eq = char:FindFirstChild(toolName)
            if eq then eq.Parent = game.Players.LocalPlayer.Backpack end
        end
    end
end, "Haz abdominales y golpea automáticamente (rápido)")


-- Auto Handstands + Punch (Fast Rep)
opThingsFolder:AddSwitch("Auto Handstands + Punch", function(Value)
    _G.ComboHandstandPunch = Value
    
    if Value then
        -- Handstands Fast Rep
        task.spawn(function()
            while _G.ComboHandstandPunch do
                local player = game.Players.LocalPlayer
                local tool = player.Backpack:FindFirstChild("Handstands") or player.Character:FindFirstChild("Handstands")
                if tool then
                    player.Character.Humanoid:EquipTool(tool)
                    if tool:FindFirstChild("repTime") then tool.repTime.Value = 0 end
                end
                player.muscleEvent:FireServer("rep")
                task.wait()
            end
        end)
        -- Punch Fast Attack
        task.spawn(function()
            while _G.ComboHandstandPunch do
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then punch.attackTime.Value = 0 end
                end
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                local punchTool = player.Character and player.Character:FindFirstChild("Punch")
                if punchTool then punchTool:Activate() end
                task.wait()
            end
        end)
    else
        local char = game.Players.LocalPlayer.Character
        for _, toolName in ipairs({"Handstands","Punch"}) do
            local eq = char:FindFirstChild(toolName)
            if eq then eq.Parent = game.Players.LocalPlayer.Backpack end
        end
    end
end, "Haz paradas de manos y golpea automáticamente (rápido)")
