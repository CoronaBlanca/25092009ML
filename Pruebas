-- DESOFUSCADOR CON WEBHOOK DE DISCORD (VERSIÓN MEJORADA)
-- =========================================================

-- ⚙️ CONFIGURACIÓN
local WEBHOOK_URL = "https://discordapp.com/api/webhooks/1428139247369584751/8qtb7uwXp6e50WxpzoTlHN4CHwn5oAJo0nKwSTyvOqP7ha9-sl0f-2lxoqjJiPcjWYb1" -- Pon tu webhook completo aquí
local GITHUB_RAW_URL = "https://raw.githubusercontent.com/CoronaBlanca/2198832473482/refs/heads/main/dxsxfxscxtxr%20By%20Shxryx" -- O tu link

-- 📊 Variables para capturar
local captured_code = {}
local captured_info = {}

print("🔍 Iniciando desofuscador...")

-- 🪝 HOOK DE LOADSTRING
local old_loadstring = loadstring or load
_G.loadstring = function(code, ...)
    print("✅ Código capturado! Longitud:", #code)
    table.insert(captured_code, code)
    return old_loadstring(code, ...)
end
loadstring = _G.loadstring

-- 📤 FUNCIÓN PARA ENVIAR A DISCORD
local function send_to_discord(content, title)
    title = title or "Código Desofuscado"
    
    print("📤 Intentando enviar a Discord...")
    
    -- Crear payload
    local data = {
        username = "Desofuscador",
        embeds = {{
            title = "🔓 " .. title,
            description = "```lua\n" .. content:sub(1, 4000) .. "\n```",
            color = 3447003,
            footer = {
                text = "MoonSec Deobfuscator | " .. os.date("%H:%M:%S")
            }
        }}
    }
    
    -- Intentar diferentes métodos de HTTP
    local http_methods = {
        -- Método 1: syn (Synapse X)
        function()
            local json = game:GetService("HttpService"):JSONEncode(data)
            return syn.request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = json
            })
        end,
        
        -- Método 2: http_request (KRNL, Fluxus)
        function()
            local json = game:GetService("HttpService"):JSONEncode(data)
            return http_request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = json
            })
        end,
        
        -- Método 3: request (Script-Ware)
        function()
            local json = game:GetService("HttpService"):JSONEncode(data)
            return request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = json
            })
        end
    }
    
    -- Probar cada método
    for i, method in ipairs(http_methods) do
        local success, result = pcall(method)
        if success then
            print("✅ Enviado con método", i)
            return true
        else
            warn("❌ Método", i, "falló:", result)
        end
    end
    
    warn("❌ Todos los métodos HTTP fallaron")
    return false
end

-- 💾 GUARDAR EN ARCHIVO (backup)
local function save_to_file(content, filename)
    filename = filename or "deobfuscated.lua"
    
    if writefile then
        writefile(filename, content)
        print("💾 Guardado en:", filename)
        return true
    else
        warn("❌ writefile no disponible")
        return false
    end
end

-- 🎯 EJECUTAR Y CAPTURAR
print("🚀 Descargando código...")

-- Descargar el código
local success_download, code = pcall(function()
    if GITHUB_RAW_URL:find("http") then
        return game:HttpGet(GITHUB_RAW_URL)
    else
        return GITHUB_RAW_URL -- Es código directo
    end
end)

if not success_download then
    warn("❌ Error descargando:", code)
    return
end

print("📦 Código descargado. Longitud:", #code)
print("⚡ Ejecutando código ofuscado...")

-- Ejecutar el código
local success_exec, error_msg = pcall(function()
    loadstring(code)()
end)

if not success_exec then
    warn("❌ Error ejecutando:", error_msg)
end

-- Esperar a que capture todo
wait(3)

-- 📋 PROCESAR RESULTADOS
print("📊 Procesando resultados...")

local final_report = ""

if #captured_code > 0 then
    print("🎉 Se capturó", #captured_code, "código(s)")
    
    for i, captured in ipairs(captured_code) do
        final_report = final_report .. "-- CÓDIGO CAPTURADO #" .. i .. "\n"
        final_report = final_report .. "-- Longitud: " .. #captured .. " caracteres\n"
        final_report = final_report .. "-- " .. string.rep("=", 50) .. "\n\n"
        final_report = final_report .. captured .. "\n\n"
    end
else
    final_report = "⚠️ No se capturó ningún código.\n"
    final_report = final_report .. "Esto puede significar que:\n"
    final_report = final_report .. "1. El código no usa loadstring()\n"
    final_report = final_report .. "2. Ya está desofuscado\n"
    final_report = final_report .. "3. Necesita un método de captura diferente\n\n"
    final_report = final_report .. "Código original:\n" .. code:sub(1, 2000)
end

-- 📤 ENVIAR Y GUARDAR
print("📤 Enviando resultados...")

-- Intentar enviar a Discord
local sent = send_to_discord(final_report, "Resultado de Desofuscación")

-- Siempre guardar en archivo como backup
save_to_file(final_report, "deobfuscated_" .. os.time() .. ".lua")

if sent then
    print("✅ ¡Completado! Revisa tu Discord")
else
    print("⚠️ No se pudo enviar a Discord, pero se guardó en archivo")
end

print("🏁 Proceso terminado")

-- 📖 INFORMACIÓN ADICIONAL
print("\n" .. string.rep("=", 60))
print("📊 RESUMEN:")
print("- Códigos capturados:", #captured_code)
print("- Webhook configurado:", WEBHOOK_URL ~= "TU_WEBHOOK_AQUI")
print("- Archivo guardado: deobfuscated_" .. os.time() .. ".lua")
print(string.rep("=", 60))
