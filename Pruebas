local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local Window = DrRayLibrary:Load("Galaxy Hub", "By Sherya")

local mainTab = DrRayLibrary.newTab("Main", "ImageIdHere")
local farmTab = DrRayLibrary.newTab("Farm", "ImageIdHere")
local miscTab = DrRayLibrary.newTab("Misc", "ImageIdHere")
local killerTab = DrRayLibrary.newTab("Killer", "ImageIdHere")
local playersTab = DrRayLibrary.newTab("Teleport", "ImageIdHere")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local startTime = os.time()
local startRebirths = player.leaderstats.Rebirths.Value
local displayName = player.DisplayName

mainTab.newLabel("Auto Brawls")

-- God Mode Toggle
local godModeToggle = false
mainTab.newToggle("God Mode (Brawl)", "Enables god mode in brawls", false, function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                pcall(function()
                    ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                end)
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Win Brawls
mainTab.newToggle("Auto Win Brawls", "Automatically wins brawls", false, function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return false end
        local character = player.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        
        local backpack = player.Backpack
        if not backpack then return false end
        
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(targetPlayer)
        if not targetPlayer or not targetPlayer.Parent then return false end
        if targetPlayer == player then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, targetPlayer.Name) then return false end
        
        local character = targetPlayer.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        
        return true
    end

    local function isLocalPlayerReady()
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        -- Auto join brawls
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)

        -- Auto equip punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
            end
        end)

        -- Auto punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "rightHand") 
                    end)
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "leftHand") 
                    end)
                end
            end
        end)

        -- Touch detection for damage
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    local character = player.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")
                    
                    for _, targetPlayer in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        pcall(function()
                            if isValidTarget(targetPlayer) then
                                local targetRoot = targetPlayer.Character.HumanoidRootPart
                                if leftHand then
                                    safeTouchInterest(targetRoot, leftHand)
                                end
                                if rightHand then
                                    safeTouchInterest(targetRoot, rightHand)
                                end
                            end
                        end)
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

-- Auto Join Brawls (separate toggle)
mainTab.newToggle("Auto Join Brawls", "Automatically joins brawls", false, function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

mainTab.newLabel("Jungle Gym")

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- Jungle Gym Bench Press
mainTab.newToggle("Jungle Bench Press", "Automatically Bench Press", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- Jungle Gym Squat
mainTab.newToggle("Jungle Squat", "Automatically Squat", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- Jungle Gym Pull Up
mainTab.newToggle("Jungle Pull Up", "Automatically Pull Up", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- Jungle Gym Boulder
mainTab.newToggle("Jungle Boulder", "Automatically Boulder", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

mainTab.newLabel("Auto Snacks")

local autoEatBoostsEnabled = false
local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar", 
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0.1)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Clear Inventory", "Automatically eats all boosts/shakes", false, function(state)
    autoEatBoostsEnabled = state
end)

-- Auto Eat Protein Egg (Every 30 Minutes)
local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800) -- 30 minutes = 1800 seconds
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Eat Egg 30 Minutes", "Automatically eats Protein Egg every 30 minutes", false, function(state)
    autoEatEnabled = state
end)

mainTab.newLabel("OP Things/Farms")

-- Lock Position Toggle
mainTab.newToggle("Lock Position", "Locks your character position", false, function(Value)
    if Value then
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

-- Anti Knockback Toggle
mainTab.newToggle("Anti Knockback", "Prevents knockback effects", false, function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        if rootPart then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.P = 1250
            bodyVelocity.Parent = rootPart
            getgenv().antiKnockbackBody = bodyVelocity
        end
    else
        if getgenv().antiKnockbackBody then
            getgenv().antiKnockbackBody:Destroy()
            getgenv().antiKnockbackBody = nil
        end
    end
end)

-- Delete All Frames Toggle
mainTab.newToggle("Delete All Frames", "Removes frame objects from ReplicatedStorage", false, function(state)
    if state then
        local rSto = game:GetService("ReplicatedStorage")
        for _, obj in pairs(rSto:GetChildren()) do
            if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
                obj:Destroy()
            end
        end
    end
end)

-- Variables para el Anti AFK
local antiAFKActive = false
local antiAFKConnection = nil

-- Función segura para notificaciones
local function sendNotification(title, text, duration)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = title;
            Text = text;
            Duration = duration or 3;
        })
    end)
    if not success then
        warn("Error mostrando notificación:", err)
    end
end

-- Función para obtener el humanoide (soporta respawn)
local player = game.Players.LocalPlayer
local function getHumanoid()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("Humanoid")
end

local humanoid = getHumanoid()
player.CharacterAdded:Connect(function()
    humanoid = getHumanoid()
end)

-- Función para activar Anti-AFK
local function startAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end

    -- Sistema Anti-AFK mejorado
    antiAFKConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if humanoid and humanoid.Parent then
            local currentTime = tick()
            -- Movimiento más notorio pero seguro
            local movement = math.sin(currentTime * 0.1) * 0.1
            humanoid:Move(Vector3.new(movement, 0, 0), false)
        end
    end)

    -- Optimización básica de rendimiento
    local function optimizeGame()
        local lighting = game:GetService("Lighting")
        lighting.GlobalShadows = false
        lighting.Technology = Enum.Technology.Compatibility

        workspace.StreamingEnabled = true
        workspace.StreamingTargetRadius = 100

        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    end

    optimizeGame()
end

-- Función para detener Anti-AFK
local function stopAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
end

-- Botón Anti AFK Simple
mainTab.newButton("Anti AFK", "Toggle Anti-AFK system", function()
    if not antiAFKActive then
        -- Activar Anti-AFK
        antiAFKActive = true
        startAntiAFK()
        sendNotification("Galaxy Hub", "Anti-AFK activado!", 3)
        print("Anti-AFK activado")
    else
        -- Desactivar Anti-AFK
        antiAFKActive = false
        stopAntiAFK()
        sendNotification("Galaxy Hub", "Anti-AFK desactivado!", 3)
        print("Anti-AFK desactivado")
    end
end)

-- Label principal
farmTab.newLabel("Auto Rocks")

-- Función para equipar herramienta y pegar
function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    local plr = game:GetService("Players").LocalPlayer
    plr.muscleEvent:FireServer("punch", "leftHand")
    plr.muscleEvent:FireServer("punch", "rightHand")
end

-- Función general para farmear rocas
function autoFarmRock(toggleVar, durabilityNeeded)
    task.spawn(function()
        while getgenv()[toggleVar] do
            task.wait()
            local plr = game:GetService("Players").LocalPlayer
            if plr.Durability.Value >= durabilityNeeded then
                for _, v in pairs(workspace.machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == durabilityNeeded then
                        local char = plr.Character
                        if char and char:FindFirstChild("LeftHand") and char:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, char.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, char.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, char.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, char.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end
    end)
end

-- Ejemplo de toggles con variables independientes
farmTab.newToggle("Tiny Rock", "Auto farm Tiny Island Rock (0 Durability)", function(state)
    getgenv().autoTiny = state
    if state then autoFarmRock("autoTiny", 0) end
end)

farmTab.newToggle("Starter Rock", "Auto farm Starter Island Rock (100 Durability)", function(state)
    getgenv().autoStarter = state
    if state then autoFarmRock("autoStarter", 100) end
end)

farmTab.newToggle("Legend Beach Rock", "Auto farm Legend Beach Rock (5000 Durability)", function(state)
    getgenv().autoLegendBeach = state
    if state then autoFarmRock("autoLegendBeach", 5000) end
end)

farmTab.newToggle("Frozen Rock", "Auto farm Frost Gym Rock (150k Durability)", function(state)
    getgenv().autoFrozen = state
    if state then autoFarmRock("autoFrozen", 150000) end
end)

farmTab.newToggle("Mythical Rock", "Auto farm Mythical Gym Rock (400k Durability)", function(state)
    getgenv().autoMythical = state
    if state then autoFarmRock("autoMythical", 400000) end
end)

farmTab.newToggle("Eternal Rock", "Auto farm Eternal Gym Rock (750k Durability)", function(state)
    getgenv().autoEternal = state
    if state then autoFarmRock("autoEternal", 750000) end
end)

farmTab.newToggle("Legend Rock", "Auto farm Legend Gym Rock (1M Durability)", function(state)
    getgenv().autoLegend = state
    if state then autoFarmRock("autoLegend", 1000000) end
end)

farmTab.newToggle("Muscle King Rock", "Auto farm Muscle King Gym Rock (5M Durability)", function(state)
    getgenv().autoMuscleKing = state
    if state then autoFarmRock("autoMuscleKing", 5000000) end
end)

farmTab.newToggle("Jungle Rock", "Auto farm Ancient Jungle Rock (10M Durability)", function(state)
    getgenv().autoJungle = state
    if state then autoFarmRock("autoJungle", 10000000) end
end)

-- Label arriba de todo
farmTab.newLabel("Auto Equip Tools")

-- Free AutoLift Gamepass
farmTab.newButton("Gamepass AutoLift", "Desbloquea el gamepass de AutoLift gratis", function()
    local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
    local player = game:GetService("Players").LocalPlayer
    for _, gamepass in pairs(gamepassFolder:GetChildren()) do
        local value = Instance.new("IntValue")
        value.Name = gamepass.Name
        value.Value = gamepass.Value
        value.Parent = player.ownedGamepasses
    end
end)

-- Funciones helper
local function equipTool(toolName)
    local player = game.Players.LocalPlayer
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid:EquipTool(tool)
    end
end

local function unequipTool(toolName)
    local char = game.Players.LocalPlayer.Character
    local equipped = char and char:FindFirstChild(toolName)
    if equipped then
        equipped.Parent = game.Players.LocalPlayer.Backpack
    end
end

-- Auto Weight
farmTab.newToggle("Auto Weight", "Levanta pesas automáticamente", function(Value)
    getgenv().AutoWeight = Value
    if Value then equipTool("Weight") else unequipTool("Weight") end
    task.spawn(function()
        while getgenv().AutoWeight do
            game.Players.LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end)

-- Auto Pushups
farmTab.newToggle("Auto Pushups", "Haz flexiones automáticamente", function(Value)
    getgenv().AutoPushups = Value
    if Value then equipTool("Pushups") else unequipTool("Pushups") end
    task.spawn(function()
        while getgenv().AutoPushups do
            game.Players.LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end)

-- Auto Handstands
farmTab.newToggle("Auto Handstands", "Haz paradas de manos automáticamente", function(Value)
    getgenv().AutoHandstands = Value
    if Value then equipTool("Handstands") else unequipTool("Handstands") end
    task.spawn(function()
        while getgenv().AutoHandstands do
            game.Players.LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end)

-- Auto Situps
farmTab.newToggle("Auto Situps", "Haz abdominales automáticamente", function(Value)
    getgenv().AutoSitups = Value
    if Value then equipTool("Situps") else unequipTool("Situps") end
    task.spawn(function()
        while getgenv().AutoSitups do
            game.Players.LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end)

-- Auto Punch
farmTab.newToggle("Auto Punch", "Golpea automáticamente", function(Value)
    getgenv().AutoPunch = Value
    if Value then
        task.spawn(function()
            while getgenv().AutoPunch do
                local player = game.Players.LocalPlayer
                equipTool("Punch")
                local punchTool = player.Character and player.Character:FindFirstChild("Punch")
                if punchTool and punchTool:FindFirstChild("attackTime") then
                    punchTool.attackTime.Value = 0
                    punchTool:Activate()
                end
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                task.wait()
            end
        end)
    else
        unequipTool("Punch")
    end
end)

-- Fast Tools
farmTab.newToggle("Fast Tools", "Acelera todas las herramientas", function(Value)
    getgenv().FastTools = Value
    local speeds = {
        {"Punch", "attackTime", Value and 0 or 0.35},
        {"Ground Slam", "attackTime", Value and 0 or 6},
        {"Stomp", "attackTime", Value and 0 or 7},
        {"Handstands", "repTime", Value and 0 or 1},
        {"Pushups", "repTime", Value and 0 or 1},
        {"Weight", "repTime", Value and 0 or 1},
        {"Situps", "repTime", Value and 0 or 1},
    }
    local player = game.Players.LocalPlayer
    for _, toolInfo in ipairs(speeds) do
        for _, container in ipairs({player.Backpack, player.Character}) do
            local tool = container and container:FindFirstChild(toolInfo[1])
            if tool and tool:FindFirstChild(toolInfo[2]) then
                tool[toolInfo[2]].Value = toolInfo[3]
            end
        end
    end
end)

-- Label para separar sección
farmTab.newLabel("Auto Rebirths & Utilities")

-- Input para objetivo de rebirth
farmTab.newTextBox("Rebirth Target", "Ingresa el número de renacimientos", function(text)
    local newValue = tonumber(text)
    if newValue and newValue > 0 then
        targetRebirthValue = newValue
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Objetivo Actualizado",
            Text = "Nuevo objetivo: " .. tostring(targetRebirthValue) .. " renacimientos",
            Duration = 3
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Entrada Inválida",
            Text = "Por favor ingresa un número válido mayor que 0",
            Duration = 3
        })
    end
end)

-- Declaración adelantada
local infiniteSwitch, targetSwitch

-- Auto Rebirth Target
targetSwitch = farmTab.newToggle("Auto Rebirth Target", "Renacimiento automático hasta alcanzar el objetivo", function(bool)
    _G.targetRebirthActive = bool
    
    if bool then
        if _G.infiniteRebirthActive and infiniteSwitch then
            infiniteSwitch:Set(false)
            _G.infiniteRebirthActive = false
        end
        
        spawn(function()
            while _G.targetRebirthActive and wait(0.1) do
                local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
                if currentRebirths >= targetRebirthValue then
                    targetSwitch:Set(false)
                    _G.targetRebirthActive = false
                    
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "¡Objetivo Alcanzado!",
                        Text = "Has alcanzado " .. tostring(targetRebirthValue) .. " renacimientos",
                        Duration = 5
                    })
                    
                    break
                end
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
    end
end)

-- Auto Rebirth Infinite
infiniteSwitch = farmTab.newToggle("Auto Rebirth (Infinite)", "Renacimiento continuo sin parar", function(bool)
    _G.infiniteRebirthActive = bool
    
    if bool then
        if _G.targetRebirthActive and targetSwitch then
            targetSwitch:Set(false)
            _G.targetRebirthActive = false
        end
        
        spawn(function()
            while _G.infiniteRebirthActive and wait(0.1) do
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
    end
end)

-- Auto Size 1
farmTab.newToggle("Auto Size 1", "Establece el tamaño del personaje a 1 continuamente", function(bool)
    _G.autoSizeActive = bool
    
    if bool then
        spawn(function()
            while _G.autoSizeActive and wait() do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
            end
        end)
    end
end)

-- Auto Teleport to Muscle King
farmTab.newToggle("Auto Teleport to Muscle King", "Teletransporte continuo al Rey Músculo", function(bool)
    _G.teleportActive = bool
    
    if bool then
        spawn(function()
            while _G.teleportActive and wait() do
                if game.Players.LocalPlayer.Character then
                    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
    end
end)

-- Sección Gift
farmTab.newLabel("Item Gifter").TextSize = 22

-- Protein Egg Gifter
local proteinEggLabel = farmTab.newLabel("Protein Eggs: 0")
proteinEggLabel.TextSize = 20

local selectedEggPlayer = nil
local eggCount = 0

local eggDropdown = farmTab.newDropdown("Choose Player for Eggs", {}, function(name)
    selectedEggPlayer = game.Players:FindFirstChild(name)
end)

-- Llenar dropdown con jugadores
for _, plr in ipairs(game.Players:GetPlayers()) do
    if plr ~= game.Players.LocalPlayer then
        eggDropdown:Add(plr.Name)
    end
end

game.Players.PlayerAdded:Connect(function(plr)
    if plr ~= game.Players.LocalPlayer then
        eggDropdown:Add(plr.Name)
    end
end)

farmTab.newTextBox("Amount of Eggs", "Cantidad de Protein Eggs a regalar", function(text)
    eggCount = tonumber(text)
end)

farmTab.newButton("Start Gifting Eggs", function()
    if selectedEggPlayer and eggCount and eggCount > 0 then
        for i = 1, eggCount do
            local args = {
                "giftRequest",
                selectedEggPlayer,
                game.Players.LocalPlayer.consumablesFolder:FindFirstChild("Protein Egg")
            }
            game.ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
        end
    end
end)

-- Tropical Shake Gifter
local tropicalShakeLabel = farmTab.newLabel("Tropical Shakes: 0")
tropicalShakeLabel.TextSize = 20

local selectedShakePlayer = nil
local shakeCount = 0

local shakeDropdown = farmTab.newDropdown("Choose Player for Shakes", {}, function(name)
    selectedShakePlayer = game.Players:FindFirstChild(name)
end)

for _, plr in ipairs(game.Players:GetPlayers()) do
    if plr ~= game.Players.LocalPlayer then
        shakeDropdown:Add(plr.Name)
    end
end

game.Players.PlayerAdded:Connect(function(plr)
    if plr ~= game.Players.LocalPlayer then
        shakeDropdown:Add(plr.Name)
    end
end)

farmTab.newTextBox("Amount of Shakes", "Cantidad de Tropical Shakes a regalar", function(text)
    shakeCount = tonumber(text)
end)

farmTab.newButton("Start Gifting Shakes", function()
    if selectedShakePlayer and shakeCount and shakeCount > 0 then
        for i = 1, shakeCount do
            local args = {
                "giftRequest",
                selectedShakePlayer,
                game.Players.LocalPlayer.consumablesFolder:FindFirstChild("Tropical Shake")
            }
            game.ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
        end
    end
end)

-- Actualización de contadores
local function updateItemCount()
    local proteinEggCount = 0
    local tropicalShakeCount = 0
    local backpack = game.Players.LocalPlayer:WaitForChild("Backpack")
    for _, item in ipairs(backpack:GetChildren()) do
        if item.Name == "Protein Egg" then
            proteinEggCount += 1
        elseif item.Name == "Tropical Shake" then
            tropicalShakeCount += 1
        end
    end
    proteinEggLabel.Text = "Protein Eggs: " .. proteinEggCount
    tropicalShakeLabel.Text = "Tropical Shakes: " .. tropicalShakeCount
end

task.spawn(function()
    while true do
        updateItemCount()
        task.wait(0.25)
    end
end)
