--Kaiser Script Private
loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local startTime = os.time()
local startRebirths = player.leaderstats.Rebirths.Value
local displayName = player.DisplayName

-- Anti-AFK System
local VirtualUser = game:GetService("VirtualUser")
local antiAFKConnection

local function setupAntiAFK()
    -- Disconnect previous connection if it exists
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    
    -- Connect to PlayerIdleEvent to prevent AFK kicks
    antiAFKConnection = player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
        print("Anti-AFK: Prevented idle kick")
    end)
    
    print("Anti-AFK system enabled")
end

-- Initialize Anti-AFK system
setupAntiAFK()

-- Create Main Window
local window = library:AddWindow("KAISER HUB | V2", {
    main_color = Color3.fromRGB(60, 60, 60), -- Gris Oscuro
    min_size = Vector2.new(500, 500),
    can_resize = true,
})

local AutoFarm = window:AddTab("Main")
local premiumFolder = window:AddTab("Misc")
local StatsTab = window:AddTab("Stats")
local killerTab = window:AddTab("Killing")
local autoRockFolder = window:AddTab("Rocks")
local pets = window:AddTab("Pets")
local teleportTab = window:AddTab("Teleports")

AutoFarm:AddLabel("Complements to Farm")

local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800)
        else
            task.wait(1)
        end
    end
end)

AutoFarm:AddSwitch("Auto Eat Egg", function(state)
    autoEatEnabled = state
end)

local repToggle = false

AutoFarm:AddSwitch("Auto Farm (Equip Any tool)", function(state)
    repToggle = state
    while repToggle do
        local args = { "rep" }
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args))
        task.wait(0.2)
    end
end)

local folder1 = AutoFarm:AddFolder("Tools")

local weightOn = false
folder1:AddSwitch("Weight", function(bool)
    weightOn = bool
    task.spawn(function()
        while weightOn do
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
            if tool then
                tool.Parent = game.Players.LocalPlayer.Character
            end
            task.wait(0.1)
        end
    end)
end)

local pushupsOn = false
folder1:AddSwitch("Pushups", function(bool)
    pushupsOn = bool
    task.spawn(function()
        while pushupsOn do
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
            if tool then
                tool.Parent = game.Players.LocalPlayer.Character
            end
            task.wait(0.1)
        end
    end)
end)

local handstandOn = false
folder1:AddSwitch("Handstand", function(bool)
    handstandOn = bool
    task.spawn(function()
        while handstandOn do
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstand")
            if tool then
                tool.Parent = game.Players.LocalPlayer.Character
            end
            task.wait(0.1)
        end
    end)
end)

local situpsOn = false
folder1:AddSwitch("Situps", function(bool)
    situpsOn = bool
    task.spawn(function()
        while situpsOn do
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
            if tool then
                tool.Parent = game.Players.LocalPlayer.Character
            end
            task.wait(0.1)
        end
    end)
end)

local function equipTool(toolName, character, backpack)
    local existingTool = character:FindFirstChildOfClass("Tool")
    if existingTool then
        existingTool.Parent = backpack
    end

    local tool = backpack:FindFirstChild(toolName) or character:FindFirstChild(toolName)
    if tool and tool.Parent ~= character then
        tool.Parent = character
    end
end

local function handleRock(rock, leftHand)
    if rock then
        rock.Size = Vector3.new(2, 1, 1)
        rock.Transparency = 1
        rock.CanCollide = false

        if rock:FindFirstChild("rockGui") then
            for _, v in pairs(rock.rockGui:GetChildren()) do
                v.Visible = false
            end
        end

        for _, particle in ipairs({"rockEmitter", "hoopParticle", "lavaParticle"}) do
            if rock:FindFirstChild(particle) then
                rock[particle]:Destroy()
            end
        end

        rock.CFrame = leftHand.CFrame

        local touchPart = rock:FindFirstChild("TouchPart")
        if touchPart then
            touchPart.CFrame = leftHand.CFrame
            local fireTouch = Instance.new("RemoteEvent")
            fireTouch.Parent = rock
            fireTouch:FireServer(touchPart)
        end
    end
end

local function autoRockFarm(rockName, toggleVar)
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    local leftHand = character:WaitForChild("LeftHand")
    local rock = game.Workspace.machinesFolder:FindFirstChild(rockName)
    rock = rock and rock:FindFirstChild("Rock")

    _G[toggleVar] = true

    while _G[toggleVar] do
        for _, toolName in ipairs({"Punch", "Pushups"}) do
            equipTool(toolName, character, backpack)
            task.wait(0.05)
        end

        handleRock(rock, leftHand)
        player:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end

local function unequipAllPetsPremium()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipUniquePetPremium(petName)
    unequipAllPetsPremium()
    task.wait(0.01)
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", pet)
        end
    end
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then
                    break
                end
            end
        end
    end
    return machine
end

local function pressEPremium()
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local targetRebirthPremium = math.huge
premiumFolder:AddTextBox(
    "Target Rebirth",
    function(text)
        targetRebirthPremium = tonumber(text) or math.huge
    end
)

local positionLockConnection = nil
local function lockPlayerPosition(position)
    if positionLockConnection then
        positionLockConnection:Disconnect()
    end

    positionLockConnection =
        RunService.Heartbeat:Connect(
        function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = position
            end
        end
    )
end

local function unlockPlayerPosition()
    if positionLockConnection then
        positionLockConnection:Disconnect()
        positionLockConnection = nil
    end
end

premiumFolder:AddSwitch(
    "Lock Position",
    function(bool)
        if bool then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local currentPosition = player.Character.HumanoidRootPart.CFrame
                lockPlayerPosition(currentPosition)
            end
        else
            unlockPlayerPosition()
        end
    end
)

local isRunning = false
premiumFolder:AddSwitch(
    "Rebirth Farm",
    function(bool)
        isRunning = bool

        task.spawn(
            function()
                while isRunning do
                    local currentRebirths = player.leaderstats.Rebirths.Value
                    local rebirthCost = 10000 + (5000 * currentRebirths)

                    if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    unequipAllPetsPremium()
                    task.wait(0.1)
                    equipUniquePetPremium("Swift Samurai")

                    while isRunning and player.leaderstats.Strength.Value < rebirthCost do
                        for i = 1, 10 do
                            player.muscleEvent:FireServer("rep")
                        end
                        task.wait()
                    end

                    unequipAllPetsPremium()
                    task.wait(0.1)
                    equipUniquePetPremium("Tribal Overlord")

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressEPremium()
                        until player.Character.Humanoid.Sit
                    end

                    local initialRebirths = player.leaderstats.Rebirths.Value
                    repeat
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        task.wait(0.1)
                    until player.leaderstats.Rebirths.Value > initialRebirths

                    if not isRunning then
                        break
                    end
                    task.wait()
                end
            end
        )
    end
)

premiumFolder:AddSwitch(
    "Hide Frames",
    function(bool)
        for _, obj in pairs(ReplicatedStorage:GetChildren()) do
            if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
                obj.Visible = not bool
            end
        end
    end
)

premiumFolder:AddSwitch(
    "Fast Strength",
    function(bool)
        local isGrinding = bool

        if not bool then
            unequipAllPetsPremium()
            return
        end

        equipUniquePetPremium("Swift Samurai")

        for i = 1, 14 do
            task.spawn(
                function()
                    while isGrinding do
                        player.muscleEvent:FireServer("rep")
                        task.wait()
                    end
                end
            )
        end
    end
)

StatsTab:AddLabel("Session Statistics")

local sessionStartTime = os.time()
local sessionStartStrength = 0
local sessionStartDurability = 0
local sessionStartRebirths = 0
local sessionStartKills = 0
local sessionStartBrawls = 0
local sessionStartAgility = 0
local hasStartedTracking = false

local sessionTimeLabel = StatsTab:AddLabel("Session Time: 00:00:00")
local strengthStatsLabel = StatsTab:AddLabel("Strength: Waiting...")
local strengthGainLabel = StatsTab:AddLabel("Gained: 0")
local durabilityStatsLabel = StatsTab:AddLabel("Durability: Waiting...")
local durabilityGainLabel = StatsTab:AddLabel("Gained: 0")
local rebirthsStatsLabel = StatsTab:AddLabel("Rebirths: Waiting...")
local rebirthsGainLabel = StatsTab:AddLabel("Gained: 0")
local killsStatsLabel = StatsTab:AddLabel("Kills: Waiting...")
local killsGainLabel = StatsTab:AddLabel("Gained: 0")
local brawlsStatsLabel = StatsTab:AddLabel("Brawls: Waiting...")
local brawlsGainLabel = StatsTab:AddLabel("Gained: 0")
local agilityStatsLabel = StatsTab:AddLabel("Agility: Waiting...")
local agilityGainLabel = StatsTab:AddLabel("Gained: 0")

local strengthHistory = {}
local durabilityHistory = {}
local calculationInterval = 10
local trackingStarted = false
local fastRepStartTime = tick()

local projectedStrengthLabel = StatsTab:AddLabel("Strength Pace: 0 /Hour | 0 /Day")
local projectedDurabilityLabel = StatsTab:AddLabel("Durability Pace: 0 /Hour | 0 /Day")
local fastRepTimeLabel = StatsTab:AddLabel("Fast Rep Time: 0d 0h 0m 0s")

local function formatTime(seconds)
    local days = math.floor(seconds / 86400)
    local hours = math.floor((seconds % 86400) / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60

    if days > 0 then
        return string.format("%dd %02dh %02dm %02ds", days, hours, minutes, secs)
    else
        return string.format("%02d:%02d:%02d", hours, minutes, secs)
    end
end

local function startTracking()
    if not hasStartedTracking then
        sessionStartStrength = player.leaderstats.Strength.Value
        sessionStartDurability = player.Durability.Value
        sessionStartKills = player.leaderstats.Kills.Value
        sessionStartRebirths = player.leaderstats.Rebirths.Value
        sessionStartBrawls = player.leaderstats.Brawls.Value
        sessionStartAgility = player.Agility.Value
        sessionStartTime = os.time()
        hasStartedTracking = true
    end
end

local function updateStats()
    if not hasStartedTracking then
        startTracking()
    end

    local currentStrength = player.leaderstats.Strength.Value
    local currentDurability = player.Durability.Value
    local currentKills = player.leaderstats.Kills.Value
    local currentRebirths = player.leaderstats.Rebirths.Value
    local currentBrawls = player.leaderstats.Brawls.Value
    local currentAgility = player.Agility.Value

    local strengthGain = currentStrength - sessionStartStrength
    local durabilityGain = currentDurability - sessionStartDurability
    local killsGain = currentKills - sessionStartKills
    local rebirthsGain = currentRebirths - sessionStartRebirths
    local brawlsGain = currentBrawls - sessionStartBrawls
    local agilityGain = currentAgility - sessionStartAgility

    strengthStatsLabel.Text = "Strength: " .. formatNumber(currentStrength)
    strengthGainLabel.Text = "Gained: " .. formatNumber(strengthGain)

    durabilityStatsLabel.Text = "Durability: " .. formatNumber(currentDurability)
    durabilityGainLabel.Text = "Gained: " .. formatNumber(durabilityGain)

    rebirthsStatsLabel.Text = "Rebirths: " .. formatNumber(currentRebirths)
    rebirthsGainLabel.Text = "Gained: " .. formatNumber(rebirthsGain)

    killsStatsLabel.Text = "Kills: " .. formatNumber(currentKills)
    killsGainLabel.Text = "Gained: " .. formatNumber(killsGain)

    brawlsStatsLabel.Text = "Brawls: " .. formatNumber(currentBrawls)
    brawlsGainLabel.Text = "Gained: " .. formatNumber(brawlsGain)

    agilityStatsLabel.Text = "Agility: " .. formatNumber(currentAgility)
    agilityGainLabel.Text = "Gained: " .. formatNumber(agilityGain)

    local elapsedTime = os.time() - sessionStartTime
    sessionTimeLabel.Text = "Session Time: " .. formatTime(elapsedTime)
end

task.spawn(
    function()
        local lastCalcTime = tick()
        local initialStrength = player.leaderstats.Strength.Value
        local initialDurability = player.Durability.Value

        while true do
            local currentTime = tick()
            local currentStrength = player.leaderstats.Strength.Value
            local currentDurability = player.Durability.Value

            if not trackingStarted and (currentStrength - initialStrength) >= 100e9 then
                trackingStarted = true
                fastRepStartTime = tick()
                strengthHistory = {}
                durabilityHistory = {}
            end

            if trackingStarted then
                local elapsedTime = currentTime - fastRepStartTime
                local days = math.floor(elapsedTime / (24 * 3600))
                local hours = math.floor((elapsedTime % (24 * 3600)) / 3600)
                local minutes = math.floor((elapsedTime % 3600) / 60)
                local seconds = math.floor(elapsedTime % 60)

                fastRepTimeLabel.Text = string.format("Fast Rep Time: %dd %dh %dm %ds", days, hours, minutes, seconds)

                table.insert(strengthHistory, {time = currentTime, value = currentStrength})
                table.insert(durabilityHistory, {time = currentTime, value = currentDurability})

                while #strengthHistory > 0 and currentTime - strengthHistory[1].time > calculationInterval do
                    table.remove(strengthHistory, 1)
                end
                while #durabilityHistory > 0 and currentTime - durabilityHistory[1].time > calculationInterval do
                    table.remove(durabilityHistory, 1)
                end

                if currentTime - lastCalcTime >= calculationInterval then
                    lastCalcTime = currentTime

                    if #strengthHistory >= 2 then
                        local strengthDelta = strengthHistory[#strengthHistory].value - strengthHistory[1].value
                        local strengthPerSecond = strengthDelta / calculationInterval
                        local strengthPerHour = math.floor(strengthPerSecond * 3600)
                        local strengthPerDay = math.floor(strengthPerSecond * 86400)

                        projectedStrengthLabel.Text =
                            "Strength Pace: " ..
                            formatNumber(strengthPerHour) .. "/Hour | " .. formatNumber(strengthPerDay) .. "/Day"
                    end

                    if #durabilityHistory >= 2 then
                        local durabilityDelta = durabilityHistory[#durabilityHistory].value - durabilityHistory[1].value
                        local durabilityPerSecond = durabilityDelta / calculationInterval
                        local durabilityPerHour = math.floor(durabilityPerSecond * 3600)
                        local durabilityPerDay = math.floor(durabilityPerSecond * 86400)

                        projectedDurabilityLabel.Text =
                            "Durability Pace: " ..
                            formatNumber(durabilityPerHour) .. "/Hour | " .. formatNumber(durabilityPerDay) .. "/Day"
                    end
                end
            end

            task.wait(0.05)
        end
    end
)

task.spawn(
    function()
        while wait(2) do
            updateStats()
        end
    end
)

local statManagementFolder = StatsTab:AddFolder("Stat Management")

statManagementFolder:AddButton(
    "Reset Session Stats",
    function()
        sessionStartStrength = player.leaderstats.Strength.Value
        sessionStartDurability = player.Durability.Value
        sessionStartKills = player.leaderstats.Kills.Value
        sessionStartRebirths = player.leaderstats.Rebirths.Value
        sessionStartBrawls = player.leaderstats.Brawls.Value
        sessionStartAgility = player.Agility.Value
        sessionStartTime = os.time()
        hasStartedTracking = false
        startTracking()
    end
)

statManagementFolder:AddButton(
    "Copy Stats To Clipboard",
    function()
        local statsText = "Muscle Legends Statistics:\\n\\n"

        statsText = statsText .. "Current Stats:\\n"
        statsText = statsText .. "Strength: " .. formatWithCommas(player.leaderstats.Strength.Value) .. "\\n"
        statsText = statsText .. "Durability: " .. formatWithCommas(player.Durability.Value) .. "\\n"
        statsText = statsText .. "Rebirths: " .. formatWithCommas(player.leaderstats.Rebirths.Value) .. "\\n"
        statsText = statsText .. "Kills: " .. formatWithCommas(player.leaderstats.Kills.Value) .. "\\n"
        statsText = statsText .. "Brawls: " .. formatWithCommas(player.leaderstats.Brawls.Value) .. "\\n"
        statsText = statsText .. "Agility: " .. formatWithCommas(player.Agility.Value) .. "\\n\\n"

        if hasStartedTracking then
            local elapsedTime = os.time() - sessionStartTime
            local strengthGain = player.leaderstats.Strength.Value - sessionStartStrength
            local durabilityGain = player.Durability.Value - sessionStartDurability
            local killsGain = player.leaderstats.Kills.Value - sessionStartKills
            local rebirthsGain = player.leaderstats.Rebirths.Value - sessionStartRebirths
            local brawlsGain = player.leaderstats.Brawls.Value - sessionStartBrawls
            local agilityGain = player.Agility.Value - sessionStartAgility

            statsText = statsText .. "Session Statistics:\\n"
            statsText = statsText .. "Session Time: " .. formatTime(elapsedTime) .. "\\n"
            statsText = statsText .. "Strength Gained: " .. formatWithCommas(strengthGain) .. "\\n"
            statsText = statsText .. "Durability Gained: " .. formatWithCommas(durabilityGain) .. "\\n"
            statsText = statsText .. "Rebirths Gained: " .. formatWithCommas(rebirthsGain) .. "\\n"
            statsText = statsText .. "Kills Gained: " .. formatWithCommas(killsGain) .. "\\n"
            statsText = statsText .. "Brawls Gained: " .. formatWithCommas(brawlsGain) .. "\\n"
            statsText = statsText .. "Agility Gained: " .. formatWithCommas(agilityGain) .. "\\n"
        end

        setclipboard(statsText)
    end
)

updateStats()
library:Init()

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.targetPlayer = _G.targetPlayer or ""

-- Improved character checking function with timeout
local function checkCharacter()
    local player = game.Players.LocalPlayer
    
    if not player then
        return nil
    end
    
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        -- Wait for character to load, but with a timeout
        local startTime = tick()
        repeat
            task.wait(0.1)
            -- If waiting too long (5 seconds), give up
            if tick() - startTime > 5 then
                return nil
            end
        until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    end
    
    return player.Character
end

-- Improved tool equipping function with error handling
local function gettool()
    pcall(function()
        -- Check if we have a character and humanoid
        if not game.Players.LocalPlayer.Character or 
           not game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            return
        end
        
        -- Try to equip the punch tool
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v.Name == "Punch" then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                break
            end
        end
        
        -- Fire the punch events
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    end)
end

-- Improved kill player function with better error handling
local function killPlayer(target)
    -- Make sure we have our own character
    local character = checkCharacter()
    if not character then return end
    
    -- Make sure target has a character
    if not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    -- Make sure we have the necessary parts
    if not character:FindFirstChild("LeftHand") then
        return
    end
    
    -- Try to kill the player
    pcall(function()
        firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
        task.wait(0.01) -- Small wait to ensure the touch registers
        firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
        gettool()
    end)
end

-- Player finding function with improved matching
local function findClosestPlayer(input)
    if not input or input == "" then return nil end
    
    input = input:lower()
    local bestMatch = nil
    local bestScore = 0
    
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local username = player.Name:lower()
            local displayName = player.DisplayName:lower()
            
            local usernameMatch = username:find(input, 1, true) ~= nil
            local displayMatch = displayName:find(input, 1, true) ~= nil
            
            local usernameScore = 0
            local displayScore = 0
            
            if usernameMatch then
                usernameScore = (#input / #username) * 100
                if username:sub(1, #input) == input then
                    usernameScore = usernameScore + 50
                end
            end
            
            if displayMatch then
                displayScore = (#input / #displayName) * 100
                if displayName:sub(1, #input) == input then
                    displayScore = displayScore + 50
                end
            end
            
            local score = math.max(usernameScore, displayScore)
            
            if score > bestScore then
                bestScore = score
                bestMatch = player
            end
        end
    end
    
    if bestScore > 20 then
        return bestMatch
    end
    
    return nil
end

local whitelistedPlayersLabel = killerTab:AddLabel("Whitelisted Players: None")
local targetPlayerLabel = killerTab:AddLabel("Target Player: None")

-- Update UI functions
local function updateWhitelistedPlayersLabel()
    if #_G.whitelistedPlayers == 0 then
        whitelistedPlayersLabel.Text = "Whitelisted Players: None"
    else
        local displayText = "Players on the White List: "
        for i, playerInfo in ipairs(_G.whitelistedPlayers) do
            if i > 1 then displayText = displayText .. ", " end
            displayText = displayText .. playerInfo
        end
        whitelistedPlayersLabel.Text = displayText
    end
end

local function updateTargetPlayerLabel()
    if _G.targetPlayer == "" then
        targetPlayerLabel.Text = "Jugador Objetivo: Ninguno"
    else
        targetPlayerLabel.Text = "Jugador Objetivo: " .. _G.targetPlayer
    end
end

-- Auto-whitelist friends feature
local autoWhitelistFriendsSwitch = killerTab:AddSwitch("Add Friends to Whitelist Automatically", function(bool)
    _G.autoWhitelistFriends = bool
    
    if bool then
        pcall(function()
            for _, player in pairs(game.Players:GetPlayers()) do
                if player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                    local playerInfo = player.Name .. " (" .. player.DisplayName .. ")"
                    if not table.find(_G.whitelistedPlayers, playerInfo) then
                        table.insert(_G.whitelistedPlayers, playerInfo)
                    end
                end
            end
            updateWhitelistedPlayersLabel()
        end)
    end
end)

-- Handle new players joining
game.Players.PlayerAdded:Connect(function(player)
    if _G.autoWhitelistFriends then
        pcall(function()
            if player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                local playerInfo = player.Name .. " (" .. player.DisplayName .. ")"
                if not table.find(_G.whitelistedPlayers, playerInfo) then
                    table.insert(_G.whitelistedPlayers, playerInfo)
                    updateWhitelistedPlayersLabel()
                end
            end
        end)
    end
end)

-- Whitelist management UI
killerTab:AddTextBox("Add Player to Whitelist (Name/Nickname)", function(text)
    if text and text ~= "" then
        local player = findClosestPlayer(text)
        if player then
            local playerInfo = player.Name .. " (" .. player.DisplayName .. ")"
            
            local alreadyWhitelisted = false
            for _, info in ipairs(_G.whitelistedPlayers) do
                if info:find(player.Name, 1, true) then
                    alreadyWhitelisted = true
                    break
                end
            end
            
            if not alreadyWhitelisted then
                table.insert(_G.whitelistedPlayers, playerInfo)
                updateWhitelistedPlayersLabel()
            end
        end
    end
end)

killerTab:AddTextBox("Remove Player from Whitelist (Name/Nickname)", function(text)
    if text and text ~= "" then
        local textLower = text:lower()
        for i, playerInfo in ipairs(_G.whitelistedPlayers) do
            if playerInfo:lower():find(textLower, 1, true) then
                table.remove(_G.whitelistedPlayers, i)
                updateWhitelistedPlayersLabel()
                return
            end
        end
        
        local player = findClosestPlayer(text)
        if player then
            for i, playerInfo in ipairs(_G.whitelistedPlayers) do
                if playerInfo:find(player.Name, 1, true) then
                    table.remove(_G.whitelistedPlayers, i)
                    updateWhitelistedPlayersLabel()
                    break
                end
            end
        end
    end
end)

killerTab:AddButton("Clear WhiteList", function()
    _G.whitelistedPlayers = {}
    updateWhitelistedPlayersLabel()
end)

-- Improved auto-kill all feature with better error handling and reliability
local autoKillAllSwitch = killerTab:AddSwitch("Automatically Remove Everyone (Except Whitelist)", function(bool)
    _G.autoKillAll = bool
    
    if bool then
        spawn(function()
            while _G.autoKillAll do
                pcall(function()
                    local players = game:GetService("Players"):GetPlayers()
                    
                    for _, player in ipairs(players) do
                        if player == game.Players.LocalPlayer or not _G.autoKillAll then
                            continue
                        end
                        
                        -- Check if player is whitelisted
                        local isWhitelisted = false
                        for _, whitelistedInfo in ipairs(_G.whitelistedPlayers) do
                            if whitelistedInfo:find(player.Name, 1, true) then
                                isWhitelisted = true
                                break
                            end
                        end
                        
                        -- Only kill if not whitelisted and has a character
                        if not isWhitelisted and player.Character and 
                           player.Character:FindFirstChild("HumanoidRootPart") and
                           player.Character:FindFirstChild("Humanoid") and
                           player.Character.Humanoid.Health > 0 then
                            
                            -- Try to kill the player with error handling
                            pcall(function()
                                killPlayer(player)
                            end)
                            
                            -- Small wait between kills to prevent overload
                            task.wait(0.05)
                        end
                    end
                end)
                
                -- Wait a bit before the next cycle, but not too long
                task.wait(0.2)
            end
        end)
    end
end)

-- Target player management
killerTab:AddTextBox("Select Target Player (Name/Nickname)", function(text)
    if text and text ~= "" then
        local player = findClosestPlayer(text)
        if player then
            _G.targetPlayer = player.Name .. " (" .. player.DisplayName .. ")"
            updateTargetPlayerLabel()
        end
    end
end)

killerTab:AddButton("Remove Target", function()
    _G.targetPlayer = ""
    updateTargetPlayerLabel()
end)

-- Improved auto-kill target feature
local autoKillTargetSwitch = killerTab:AddSwitch("Delete Target Automatically", function(bool)
    _G.autoKillTarget = bool
    
    if bool and _G.targetPlayer ~= "" then
        spawn(function()
            while _G.autoKillTarget and _G.targetPlayer ~= "" do
                pcall(function()
                    local targetName = _G.targetPlayer:match("^([^%(]+)")
                    if targetName then
                        targetName = targetName:gsub("%s+$", "")
                        local targetPlayer = game.Players:FindFirstChild(targetName)
                        if targetPlayer and targetPlayer.Character and 
                           targetPlayer.Character:FindFirstChild("HumanoidRootPart") and
                           targetPlayer.Character:FindFirstChild("Humanoid") and
                           targetPlayer.Character.Humanoid.Health > 0 then
                            
                            killPlayer(targetPlayer)
                        end
                    end
                end)
                task.wait(0.1)
            end
        end)
    end
end)

-- Manual kill buttons
killerTab:AddButton("Remove Everyone (Except Whitelist)", function()
    pcall(function()
        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                local isWhitelisted = false
                for _, whitelistedInfo in ipairs(_G.whitelistedPlayers) do
                    if whitelistedInfo:find(player.Name, 1, true) then
                        isWhitelisted = true
                        break
                    end
                end
                
                if not isWhitelisted and player.Character and 
                   player.Character:FindFirstChild("HumanoidRootPart") then
                    killPlayer(player)
                    task.wait(0.05)
                end
            end
        end
    end)
end)

killerTab:AddButton("Delete Target", function()
    if _G.targetPlayer ~= "" then
        pcall(function()
            local targetName = _G.targetPlayer:match("^([^%(]+)")
            if targetName then
                targetName = targetName:gsub("%s+$", "")
                local targetPlayer = game.Players:FindFirstChild(targetName)
                if targetPlayer then
                    killPlayer(targetPlayer)
                end
            end
        end)
    end
end)

-- Initialize UI
updateWhitelistedPlayersLabel()
updateTargetPlayerLabel()

-- Define the gettool function first
function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

-- Add all rock farming toggles to the Auto Rock folder
autoRockFolder:AddSwitch("Tiny Rock", function(Value)
    selectrock = "Tiny Island Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 0 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 0 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Starter Rock", function(Value)
    selectrock = "Starter Island Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 100 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 100 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Legend Beach Rock", function(Value)
    selectrock = "Legend Beach Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 5000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 5000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Frozen Rock", function(Value)
    selectrock = "Frost Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 150000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 150000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Mythical Rock", function(Value)
    selectrock = "Mythical Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 400000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 400000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Eternal Rock", function(Value)
    selectrock = "Eternal Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 750000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 750000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Legend Rock", function(Value)
    selectrock = "Legend Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 1000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 1000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Muscle King Rock", function(Value)
    selectrock = "Muscle King Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 5000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 5000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Jungle Rock", function(Value)
    selectrock = "Ancient Jungle Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 10000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 10000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Pet section
pets:AddLabel("Pets")

-- Create pet dropdown with the correct format
local selectedPet = "Neon Guardian" -- Default selection
local petDropdown = pets:AddDropdown("Seleccionar Mascota", function(text)
    selectedPet = text
    print("Mascota seleccionada: " .. text)
end)

-- Add pet options
petDropdown:Add("Neon Guardian")
petDropdown:Add("Blue Birdie")
petDropdown:Add("Blue Bunny")
petDropdown:Add("Blue Firecaster")
petDropdown:Add("Blue Pheonix")
petDropdown:Add("Crimson Falcon")
petDropdown:Add("Cybernetic Showdown Dragon")
petDropdown:Add("Dark Golem")
petDropdown:Add("Dark Legends Manticore")
petDropdown:Add("Dark Vampy")
petDropdown:Add("Darkstar Hunter")
petDropdown:Add("Eternal Strike Leviathan")
petDropdown:Add("Frostwave Legends Penguin")
petDropdown:Add("Gold Warrior")
petDropdown:Add("Golden Pheonix")
petDropdown:Add("Golden Viking")
petDropdown:Add("Green Butterfly")
petDropdown:Add("Green Firecaster")
petDropdown:Add("Infernal Dragon")
petDropdown:Add("Lightning Strike Phantom")
petDropdown:Add("Magic Butterfly")
petDropdown:Add("Muscle Sensei")
petDropdown:Add("Orange Hedgehog")
petDropdown:Add("Orange Pegasus")
petDropdown:Add("Phantom Genesis Dragon")
petDropdown:Add("Purple Dragon")
petDropdown:Add("Purple Falcon")
petDropdown:Add("Red Dragon")
petDropdown:Add("Red Firecaster")
petDropdown:Add("Red Kitty")
petDropdown:Add("Silver Dog")
petDropdown:Add("Ultimate Supernova Pegasus")
petDropdown:Add("Ultra Birdie")
petDropdown:Add("White Pegasus")
petDropdown:Add("White Pheonix")
petDropdown:Add("Yellow Butterfly")

-- Auto open pet toggle
pets:AddSwitch("Auto Open Pet", function(bool)
    _G.AutoHatchPet = bool
    
    if bool then
        spawn(function()
            while _G.AutoHatchPet and selectedPet ~= "" do
                local petToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                if petToOpen then
                    ReplicatedStorage.cPetShopRemote:InvokeServer(petToOpen)
                end
                task.wait(1)
            end
        end)
    end
end)

-- Aura section
pets:AddLabel("AURAS")

-- Create aura dropdown with the correct format
local selectedAura = "Blue Aura" -- Default selection
local auraDropdown = pets:AddDropdown("Select Aura", function(text)
    selectedAura = text
    print("Aura seleccionada: " .. text)
end)

-- Add aura options
auraDropdown:Add("Astral Electro")
auraDropdown:Add("Azure Tundra")
auraDropdown:Add("Blue Aura")
auraDropdown:Add("Dark Electro")
auraDropdown:Add("Dark Lightning")
auraDropdown:Add("Dark Storm")
auraDropdown:Add("Electro")
auraDropdown:Add("Enchanted Mirage")
auraDropdown:Add("Entropic Blast")
auraDropdown:Add("Eternal Megastrike")
auraDropdown:Add("Grand Supernova")
auraDropdown:Add("Green Aura")
auraDropdown:Add("Inferno")
auraDropdown:Add("Lightning")
auraDropdown:Add("Muscle King")
auraDropdown:Add("Power Lightning")
auraDropdown:Add("Purple Aura")
auraDropdown:Add("Purple Nova")
auraDropdown:Add("Red Aura")
auraDropdown:Add("Supernova")
auraDropdown:Add("Ultra Inferno")
auraDropdown:Add("Ultra Mirage")
auraDropdown:Add("Unstable Mirage")
auraDropdown:Add("Yellow Aura")

-- Auto open aura toggle
pets:AddSwitch("Auto Open Auras", function(bool)
    _G.AutoHatchAura = bool
    
    if bool then
        spawn(function()
            while _G.AutoHatchAura and selectedAura ~= "" do
                local auraToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                if auraToOpen then
                    ReplicatedStorage.cPetShopRemote:InvokeServer(auraToOpen)
                end
                task.wait(1)
            end
        end)
    end
end)

teleportTab:AddButton("Spawn", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(2, 8, 115)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Inicio",
        Duration = 0
    })
end)

teleportTab:AddButton("Secret Area", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(1947, 2, 6191)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Área Secreta",
        Duration = 0
    })
end)

teleportTab:AddButton("Tiny Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-34, 7, 1903)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Área Diminuta",
        Duration = 0
    })
end)

teleportTab:AddButton("Teleport Frozen", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(- 2600.00244, 3.67686558, - 403.884369, 0.0873617008, 1.0482899e-09, 0.99617666, 3.07204253e-08, 1, - 3.7464023e-09, - 0.99617666, 3.09302628e-08, 0.0873617008)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Área Congelada",
        Duration = 0
    })
end)

teleportTab:AddButton("Mythical", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(2255, 7, 1071)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Área Mítica",
        Duration = 0
    })
end)

teleportTab:AddButton("Inferno", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-6768, 7, -1287)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Infierno",
        Duration = 0
    })
end)

teleportTab:AddButton("Legend", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(4604, 991, -3887)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado a Leyenda",
        Duration = 0
    })
end)

teleportTab:AddButton("Muscle King Gym", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-8646, 17, -5738)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Rey Musculoso",
        Duration = 0
    })
end)

teleportTab:AddButton("Jungle", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-8659, 6, 2384)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado a la Jungla",
        Duration = 0
    })
end)

teleportTab:AddButton("Brawl Lava", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(4471, 119, -8836)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Combate de Lava",
        Duration = 0
    })
end)

teleportTab:AddButton("Brawl Desert", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(960, 17, -7398)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Combate del Desierto",
        Duration = 0
    })
end)

teleportTab:AddButton("Brawl Regular", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-1849, 20, -6335)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teletransportado al Combate de Playa",
        Duration = 0
    })
end)
