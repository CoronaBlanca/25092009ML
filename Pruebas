local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local Window = DrRayLibrary:Load("Galaxy Hub", "By Sherya")

local mainTab = DrRayLibrary.newTab("Main", "ImageIdHere")
local farmTab = DrRayLibrary.newTab("Farm", "ImageIdHere")
local miscTab = DrRayLibrary.newTab("Misc", "ImageIdHere")
local killerTab = DrRayLibrary.newTab("Killer", "ImageIdHere")
local playersTab = DrRayLibrary.newTab("Teleport", "ImageIdHere")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local startTime = os.time()
local startRebirths = player.leaderstats.Rebirths.Value
local displayName = player.DisplayName

mainTab.newLabel("Auto Brawls")

-- God Mode Toggle
local godModeToggle = false
mainTab.newToggle("God Mode (Brawl)", "Enables god mode in brawls", false, function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                pcall(function()
                    ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                end)
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Win Brawls
mainTab.newToggle("Auto Win Brawls", "Automatically wins brawls", false, function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return false end
        local character = player.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        
        local backpack = player.Backpack
        if not backpack then return false end
        
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(targetPlayer)
        if not targetPlayer or not targetPlayer.Parent then return false end
        if targetPlayer == player then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, targetPlayer.Name) then return false end
        
        local character = targetPlayer.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        
        return true
    end

    local function isLocalPlayerReady()
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        -- Auto join brawls
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)

        -- Auto equip punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
            end
        end)

        -- Auto punch
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "rightHand") 
                    end)
                    pcall(function() 
                        player.muscleEvent:FireServer("punch", "leftHand") 
                    end)
                end
            end
        end)

        -- Touch detection for damage
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                    local character = player.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")
                    
                    for _, targetPlayer in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        pcall(function()
                            if isValidTarget(targetPlayer) then
                                local targetRoot = targetPlayer.Character.HumanoidRootPart
                                if leftHand then
                                    safeTouchInterest(targetRoot, leftHand)
                                end
                                if rightHand then
                                    safeTouchInterest(targetRoot, rightHand)
                                end
                            end
                        end)
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

-- Auto Join Brawls (separate toggle)
mainTab.newToggle("Auto Join Brawls", "Automatically joins brawls", false, function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

mainTab.newLabel("Jungle Gym")

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- Jungle Gym Bench Press
mainTab.newToggle("Jungle Bench Press", "Automatically Bench Press", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- Jungle Gym Squat
mainTab.newToggle("Jungle Squat", "Automatically Squat", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- Jungle Gym Pull Up
mainTab.newToggle("Jungle Pull Up", "Automatically Pull Up", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- Jungle Gym Boulder
mainTab.newToggle("Jungle Boulder", "Automatically Boulder", false, function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

mainTab.newLabel("Auto Snacks")

local autoEatBoostsEnabled = false
local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar", 
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0.1)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Clear Inventory", "Automatically eats all boosts/shakes", false, function(state)
    autoEatBoostsEnabled = state
end)

-- Auto Eat Protein Egg (Every 30 Minutes)
local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800) -- 30 minutes = 1800 seconds
        else
            task.wait(1)
        end
    end
end)

mainTab.newToggle("Auto Eat Egg 30 Minutes", "Automatically eats Protein Egg every 30 minutes", false, function(state)
    autoEatEnabled = state
end)

mainTab.newLabel("OP Things/Farms")

-- Lock Position Toggle
mainTab.newToggle("Lock Position", "Locks your character position", false, function(Value)
    if Value then
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

-- Anti Knockback Toggle
mainTab.newToggle("Anti Knockback", "Prevents knockback effects", false, function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        if rootPart then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.P = 1250
            bodyVelocity.Parent = rootPart
            getgenv().antiKnockbackBody = bodyVelocity
        end
    else
        if getgenv().antiKnockbackBody then
            getgenv().antiKnockbackBody:Destroy()
            getgenv().antiKnockbackBody = nil
        end
    end
end)

-- Delete All Frames Toggle
mainTab.newToggle("Delete All Frames", "Removes frame objects from ReplicatedStorage", false, function(state)
    if state then
        local rSto = game:GetService("ReplicatedStorage")
        for _, obj in pairs(rSto:GetChildren()) do
            if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
                obj:Destroy()
            end
        end
    end
end)

-- Variables para el Anti AFK
local antiAFKActive = false
local antiAFKConnection = nil

-- Función para activar Anti-AFK
local function startAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Sistema Anti-AFK mejorado
    antiAFKConnection = game:GetService("RunService").Heartbeat:Connect(function()
        -- Movimiento micro para evitar AFK
        if humanoid and humanoid.Parent then
            local currentTime = tick()
            local movement = math.sin(currentTime * 0.1) * 0.01
            humanoid:Move(Vector3.new(movement, 0, 0), false)
        end
    end)
    
    -- También activar anti-lag básico
    local function optimizeGame()
        -- Reducir calidad gráfica automáticamente
        local lighting = game:GetService("Lighting")
        lighting.GlobalShadows = false
        lighting.Technology = Enum.Technology.Compatibility
        
        -- Optimizar workspace
        workspace.StreamingEnabled = true
        workspace.StreamingTargetRadius = 100
        
        -- Configurar settings para mejor rendimiento
        settings().Rendering.QualityLevel = "Level01"
    end
    
    optimizeGame()
end

-- Función para detener Anti-AFK
local function stopAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
end

-- Botón Anti AFK Simple
mainTab.newButton("Anti AFK", "Toggle Anti-AFK system", function()
    if not antiAFKActive then
        -- Activar Anti-AFK
        antiAFKActive = true
        
        -- Iniciar sistema Anti-AFK
        startAntiAFK()
        
        -- Notificación de activación
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Galaxy Hub";
            Text = "Anti-AFK activado!";
            Duration = 3;
        })
        
        print("Anti-AFK activado")
        
    else
        -- Desactivar Anti-AFK
        antiAFKActive = false
        
        -- Detener sistema
        stopAntiAFK()
        
        -- Notificación de desactivación
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Galaxy Hub";
            Text = "Anti-AFK desactivado!";
            Duration = 3;
        })
        
        print("Anti-AFK desactivado")
    end
end)

farmTab.newLabel("Auto Rocks")

function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

-- Tiny Rock
farmTab.newToggle("Tiny Rock", "Auto farm Tiny Island Rock (0 Durability)", function()
    selectrock = "Tiny Island Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 0 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 0 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Tiny Rock activado")
    else
        print("Tiny Rock desactivado")
    end
end)

-- Starter Rock
farmTab.newToggle("Starter Rock", "Auto farm Starter Island Rock (100 Durability)", function()
    selectrock = "Starter Island Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 100 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 100 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Starter Rock activado")
    else
        print("Starter Rock desactivado")
    end
end)

-- Legend Beach Rock
farmTab.newToggle("Legend Beach Rock", "Auto farm Legend Beach Rock (5000 Durability)", function()
    selectrock = "Legend Beach Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 5000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 5000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Legend Beach Rock activado")
    else
        print("Legend Beach Rock desactivado")
    end
end)

-- Frozen Rock
farmTab.newToggle("Frozen Rock", "Auto farm Frost Gym Rock (150,000 Durability)", function()
    selectrock = "Frost Gym Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 150000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 150000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Frozen Rock activado")
    else
        print("Frozen Rock desactivado")
    end
end)

-- Mythical Rock
farmTab.newToggle("Mythical Rock", "Auto farm Mythical Gym Rock (400,000 Durability)", function()
    selectrock = "Mythical Gym Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 400000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 400000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Mythical Rock activado")
    else
        print("Mythical Rock desactivado")
    end
end)

-- Eternal Rock
farmTab.newToggle("Eternal Rock", "Auto farm Eternal Gym Rock (750,000 Durability)", function()
    selectrock = "Eternal Gym Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 750000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 750000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Eternal Rock activado")
    else
        print("Eternal Rock desactivado")
    end
end)

-- Legend Rock
farmTab.newToggle("Legend Rock", "Auto farm Legend Gym Rock (1,000,000 Durability)", function()
    selectrock = "Legend Gym Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 1000000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 1000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Legend Rock activado")
    else
        print("Legend Rock desactivado")
    end
end)

-- Muscle King Rock
farmTab.newToggle("Muscle King Rock", "Auto farm Muscle King Gym Rock (5,000,000 Durability)", function()
    selectrock = "Muscle King Gym Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 5000000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 5000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Muscle King Rock activado")
    else
        print("Muscle King Rock desactivado")
    end
end)

-- Jungle Rock
farmTab.newToggle("Jungle Rock", "Auto farm Ancient Jungle Rock (10,000,000 Durability)", function()
    selectrock = "Ancient Jungle Rock"
    getgenv().autoFarm = not getgenv().autoFarm
    
    if getgenv().autoFarm then
        task.spawn(function()
            while getgenv().autoFarm do
                task.wait()
                if not getgenv().autoFarm then break end
                
                if game:GetService("Players").LocalPlayer.Durability.Value >= 10000000 then
                    for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                        if v.Name == "neededDurability" and v.Value == 10000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                            firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                            gettool()
                        end
                    end
                end
            end
        end)
        print("Jungle Rock activado")
    else
        print("Jungle Rock desactivado")
    end
end)

farmTab.newLabel("Auto Equip Tools")

farmTab.newButton("Gamepass AutoLift", "Desbloquea el gamepass de AutoLift gratis", function()
    local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
    local player = game:GetService("Players").LocalPlayer
    for _, gamepass in pairs(gamepassFolder:GetChildren()) do
        local value = Instance.new("IntValue")
        value.Name = gamepass.Name
        value.Value = gamepass.Value
        value.Parent = player.ownedGamepasses
    end
    print("Gamepass AutoLift desbloqueado!")
end)

-- Auto Weight Toggle
farmTab.newToggle("Auto Weight", "Levanta pesas automáticamente", function()
    _G.AutoWeight = not _G.AutoWeight
    
    if _G.AutoWeight then
        local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
        if weightTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(weightTool)
        end
        
        task.spawn(function()
            while _G.AutoWeight do
                if not _G.AutoWeight then break end
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
        print("Auto Weight activado")
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Weight")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
        print("Auto Weight desactivado")
    end
end)

-- Auto Pushups Toggle
farmTab.newToggle("Auto Pushups", "Haz flexiones automáticamente", function()
    _G.AutoPushups = not _G.AutoPushups
    
    if _G.AutoPushups then
        local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
        if pushupsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(pushupsTool)
        end
        
        task.spawn(function()
            while _G.AutoPushups do
                if not _G.AutoPushups then break end
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
        print("Auto Pushups activado")
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Pushups")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
        print("Auto Pushups desactivado")
    end
end)

-- Auto Handstands Toggle
farmTab.newToggle("Auto Handstands", "Haz paradas de manos automáticamente", function()
    _G.AutoHandstands = not _G.AutoHandstands
    
    if _G.AutoHandstands then
        local handstandsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstands")
        if handstandsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(handstandsTool)
        end
        
        task.spawn(function()
            while _G.AutoHandstands do
                if not _G.AutoHandstands then break end
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
        print("Auto Handstands activado")
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Handstands")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
        print("Auto Handstands desactivado")
    end
end)

-- Auto Situps Toggle
farmTab.newToggle("Auto Situps", "Haz abdominales automáticamente", function()
    _G.AutoSitups = not _G.AutoSitups
    
    if _G.AutoSitups then
        local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
        if situpsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(situpsTool)
        end
        
        task.spawn(function()
            while _G.AutoSitups do
                if not _G.AutoSitups then break end
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
        print("Auto Situps activado")
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Situps")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
        print("Auto Situps desactivado")
    end
end)

-- Auto Punch Toggle
farmTab.newToggle("Auto Punch", "Golpea automáticamente", function()
    _G.fastHitActive = not _G.fastHitActive
    
    if _G.fastHitActive then
        -- Function to equip and modify punch
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0.1)
            end
        end)
        
        -- Function for rapid punching
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local player = game.Players.LocalPlayer
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                
                local character = player.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool then
                        punchTool:Activate()
                    end
                end
                task.wait(0)
            end
        end)
        print("Auto Punch activado")
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Punch")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
        print("Auto Punch desactivado")
    end
end)

-- Fast Tools Toggle
farmTab.newToggle("Fast Tools", "Acelera todas las herramientas", function()
    _G.FastTools = not _G.FastTools
    
    local defaultSpeeds = {
        {
            "Punch",
            "attackTime",
            _G.FastTools and 0 or 0.35
        },
        {
            "Ground Slam",
            "attackTime",
            _G.FastTools and 0 or 6
        },
        {
            "Stomp",
            "attackTime",
            _G.FastTools and 0 or 7
        },
        {
            "Handstands",
            "repTime",
            _G.FastTools and 0 or 1
        },
        {
            "Pushups",
            "repTime",
            _G.FastTools and 0 or 1
        },
        {
            "Weight",
            "repTime",
            _G.FastTools and 0 or 1
        },
        {
            "Situps",
            "repTime",
            _G.FastTools and 0 or 1
        }
    }
    
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    
    for _, toolInfo in ipairs(defaultSpeeds) do
        local tool = backpack:FindFirstChild(toolInfo[1])
        if tool and tool:FindFirstChild(toolInfo[2]) then
            tool[toolInfo[2]].Value = toolInfo[3]
        end
        
        local equippedTool = player.Character and player.Character:FindFirstChild(toolInfo[1])
        if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
            equippedTool[toolInfo[2]].Value = toolInfo[3]
        end
    end
    
    if _G.FastTools then
        print("Fast Tools activado - Herramientas aceleradas")
    else
        print("Fast Tools desactivado - Velocidades normales")
    end
end)

farmTab.newLabel("Auto Rebirths")

-- Variables globales
local targetRebirthValue = 1
local updateStats = function() end -- Placeholder para la función updateStats

-- Target rebirth input - TextBox
farmTab.newTextBox("Rebirth Target", "Ingresa el número objetivo de renacimientos", function(text)
    local newValue = tonumber(text)
    if newValue and newValue > 0 then
        targetRebirthValue = newValue
        updateStats() -- Call the stats update function
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Objetivo Actualizado",
            Text = "Nuevo objetivo: " .. tostring(targetRebirthValue) .. " renacimientos",
            Duration = 3
        })
        print("Objetivo de renacimientos actualizado a: " .. targetRebirthValue)
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Entrada Inválida",
            Text = "Por favor ingresa un número válido mayor que 0",
            Duration = 3
        })
        print("Error: Entrada inválida para objetivo de renacimientos")
    end
end)

-- Auto Rebirth Target Toggle
farmTab.newToggle("Auto Rebirth Target", "Renacimiento automático hasta alcanzar el objetivo", function()
    _G.targetRebirthActive = not _G.targetRebirthActive
    
    if _G.targetRebirthActive then
        -- Turn off infinite rebirth if it's on
        if _G.infiniteRebirthActive then
            _G.infiniteRebirthActive = false
            print("Auto Rebirth Infinite desactivado")
        end
        
        -- Start target rebirth loop
        spawn(function()
            while _G.targetRebirthActive and wait(0.1) do
                local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
                
                if currentRebirths >= targetRebirthValue then
                    _G.targetRebirthActive = false
                    
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "¡Objetivo Alcanzado!",
                        Text = "Has alcanzado " .. tostring(targetRebirthValue) .. " renacimientos",
                        Duration = 5
                    })
                    
                    print("¡Objetivo de renacimientos alcanzado! (" .. targetRebirthValue .. ")")
                    break
                end
                
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
        print("Auto Rebirth Target activado - Objetivo: " .. targetRebirthValue)
    else
        print("Auto Rebirth Target desactivado")
    end
end)

-- Auto Rebirth (Infinite) Toggle
farmTab.newToggle("Auto Rebirth (Infinite)", "Renacimiento continuo sin parar", function()
    _G.infiniteRebirthActive = not _G.infiniteRebirthActive
    
    if _G.infiniteRebirthActive then
        -- Turn off target rebirth if it's on
        if _G.targetRebirthActive then
            _G.targetRebirthActive = false
            print("Auto Rebirth Target desactivado")
        end
        
        -- Start infinite rebirth loop
        spawn(function()
            while _G.infiniteRebirthActive and wait(0.1) do
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
        print("Auto Rebirth Infinite activado")
    else
        print("Auto Rebirth Infinite desactivado")
    end
end)

-- Auto Size 1 Toggle
farmTab.newToggle("Auto Size 1", "Establece el tamaño del personaje a 1 continuamente", function()
    _G.autoSizeActive = not _G.autoSizeActive
    
    if _G.autoSizeActive then
        spawn(function()
            while _G.autoSizeActive and wait() do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
            end
        end)
        print("Auto Size 1 activado")
    else
        print("Auto Size 1 desactivado")
    end
end)

-- Auto Teleport to Muscle King Toggle
farmTab.newToggle("Auto Teleport to Muscle King", "Teletransporte continuo al Rey Músculo", function()
    _G.teleportActive = not _G.teleportActive
    
    if _G.teleportActive then
        spawn(function()
            while _G.teleportActive and wait() do
                if game.Players.LocalPlayer.Character then
                    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
        print("Auto Teleport to Muscle King activado")
    else
        print("Auto Teleport to Muscle King desactivado")
    end
end)

-- Botón adicional para mostrar estadísticas actuales
farmTab.newButton("Show Current Stats", "Muestra las estadísticas actuales del jugador", function()
    local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
    local currentTarget = targetRebirthValue
    local remaining = math.max(0, currentTarget - currentRebirths)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Estadísticas Actuales",
        Text = "Renacimientos: " .. currentRebirths .. " | Objetivo: " .. currentTarget .. " | Restantes: " .. remaining,
        Duration = 5
    })
    
    print("=== ESTADÍSTICAS ACTUALES ===")
    print("Renacimientos actuales: " .. currentRebirths)
    print("Objetivo establecido: " .. currentTarget)
    print("Renacimientos restantes: " .. remaining)
    print("=============================")
end)

farmTab.newLabel("Gift Snacks")

-- Variables globales
local selectedPlayerEgg = nil
local selectedPlayerShake = nil
local eggCount = 0
local shakeCount = 0

-- Crear labels para mostrar cantidades
farmTab.newLabel("=== EGG GIFTER ===")
farmTab.newLabel("Protein Eggs: 0")
farmTab.newLabel("=== SHAKE GIFTER ===") 
farmTab.newLabel("Tropical Shakes: 0")

-- Función para actualizar contador de items
local function updateItemCount()
    local proteinEggCount = 0
    local tropicalShakeCount = 0
    local consumablesFolder = Players.LocalPlayer:FindFirstChild("consumablesFolder")
    
    if consumablesFolder then
        for _, item in ipairs(consumablesFolder:GetChildren()) do
            if item.Name == "Protein Egg" then
                proteinEggCount = proteinEggCount + 1
            elseif item.Name == "Tropical Shake" then
                tropicalShakeCount = tropicalShakeCount + 1
            end
        end
    end
    
    print("Protein Eggs: " .. proteinEggCount .. " | Tropical Shakes: " .. tropicalShakeCount)
end

-- Iniciar contador automático
task.spawn(function()
    while true do
        updateItemCount()
        task.wait(1)
    end
end)

-- === SECCIÓN EGG GIFTER ===

-- Dropdown para seleccionar jugador (Eggs)
farmTab.newDropdown("Select Player (Eggs)", {"Seleccionar jugador..."}, function(selectedOption)
    selectedPlayerEgg = Players:FindFirstChild(selectedOption)
    if selectedPlayerEgg then
        print("Jugador seleccionado para eggs: " .. selectedOption)
    end
end)

-- Función para actualizar dropdown de eggs
local function updateEggDropdown()
    local players = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(players, player.Name)
        end
    end
    return players
end

-- TextBox para cantidad de eggs
farmTab.newTextBox("Egg Amount", "Cantidad de Protein Eggs a regalar", function(text)
    local amount = tonumber(text)
    if amount and amount > 0 then
        eggCount = amount
        print("Cantidad de eggs establecida: " .. eggCount)
    else
        print("Error: Ingresa un número válido para eggs")
    end
end)

-- Botón para regalar eggs
farmTab.newButton("Gift Protein Eggs", "Regala Protein Eggs al jugador seleccionado", function()
    if selectedPlayerEgg and eggCount and eggCount > 0 then
        local proteinEgg = Players.LocalPlayer.consumablesFolder:FindFirstChild("Protein Egg")
        if proteinEgg then
            for i = 1, eggCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedPlayerEgg,
                    [3] = proteinEgg
                }
                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
            
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Eggs Enviados",
                Text = "Se enviaron " .. eggCount .. " Protein Eggs a " .. selectedPlayerEgg.Name,
                Duration = 3
            })
            
            print("Se enviaron " .. eggCount .. " Protein Eggs a " .. selectedPlayerEgg.Name)
        else
            print("Error: No tienes Protein Eggs disponibles")
        end
    else
        print("Error: Selecciona un jugador y establece una cantidad válida de eggs")
    end
end)

-- === SECCIÓN SHAKE GIFTER ===

-- Dropdown para seleccionar jugador (Shakes)
farmTab.newDropdown("Select Player (Shakes)", {"Seleccionar jugador..."}, function(selectedOption)
    selectedPlayerShake = Players:FindFirstChild(selectedOption)
    if selectedPlayerShake then
        print("Jugador seleccionado para shakes: " .. selectedOption)
    end
end)

-- TextBox para cantidad de shakes
farmTab.newTextBox("Shake Amount", "Cantidad de Tropical Shakes a regalar", function(text)
    local amount = tonumber(text)
    if amount and amount > 0 then
        shakeCount = amount
        print("Cantidad de shakes establecida: " .. shakeCount)
    else
        print("Error: Ingresa un número válido para shakes")
    end
end)

-- Botón para regalar shakes
farmTab.newButton("Gift Tropical Shakes", "Regala Tropical Shakes al jugador seleccionado", function()
    if selectedPlayerShake and shakeCount and shakeCount > 0 then
        local tropicalShake = Players.LocalPlayer.consumablesFolder:FindFirstChild("Tropical Shake")
        if tropicalShake then
            for i = 1, shakeCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedPlayerShake,
                    [3] = tropicalShake
                }
                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
            
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Shakes Enviados",
                Text = "Se enviaron " .. shakeCount .. " Tropical Shakes a " .. selectedPlayerShake.Name,
                Duration = 3
            })
            
            print("Se enviaron " .. shakeCount .. " Tropical Shakes a " .. selectedPlayerShake.Name)
        else
            print("Error: No tienes Tropical Shakes disponibles")
        end
    else
        print("Error: Selecciona un jugador y establece una cantidad válida de shakes")
    end
end)

-- Botones adicionales para funciones útiles

-- Botón para actualizar lista de jugadores
farmTab.newButton("Refresh Players", "Actualiza la lista de jugadores disponibles", function()
    print("=== JUGADORES DISPONIBLES ===")
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            print("- " .. player.Name)
        end
    end
    print("=============================")
end)

-- Botón para verificar inventario
farmTab.newButton("Check Inventory", "Verifica tu inventario actual", function()
    local consumablesFolder = Players.LocalPlayer:FindFirstChild("consumablesFolder")
    if consumablesFolder then
        print("=== TU INVENTARIO ===")
        for _, item in ipairs(consumablesFolder:GetChildren()) do
            print("- " .. item.Name)
        end
        print("====================")
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Inventario",
            Text = "Revisa la consola para ver tu inventario completo",
            Duration = 3
        })
    end
end)

-- Label de nota importante
farmTab.newLabel("")
farmTab.newLabel("⚠️ IMPORTANTE: Jungle Captain Obligatorio ⚠️")

-- Conectar eventos para jugadores que se unen/salen
Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        print("Nuevo jugador disponible para regalo: " .. player.Name)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if player == selectedPlayerEgg then
        selectedPlayerEgg = nil
        print("El jugador seleccionado para eggs se desconectó")
    end
    if player == selectedPlayerShake then
        selectedPlayerShake = nil
        print("El jugador seleccionado para shakes se desconectó")
    end
end)
